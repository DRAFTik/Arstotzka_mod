#	clear_variable = infrastructure
#	clear_variable = hospital
#	clear_variable = arms_factory
#	clear_variable = industrial_complex
#	clear_variable = dockyard
#	clear_variable = supply_node
#	clear_variable = naval_base
#	
#	clear_variable = anti_air_building
#	clear_variable = air_base
#	clear_variable = bunker
#	clear_variable = coastal_bunker
#	clear_variable = radar_station
#	clear_variable = rocket_site
#	
#	clear_variable = synthetic_refinery
#	clear_variable = fuel_silo
#	clear_variable = nuclear_reactor


#	modifier@fake_fuel_cost
#	modifier@universal_factory_modifier

#	modifier@num_generation_electric_power
#	modifier@num_generation_electric_power_factor
#	modifier@num_use_electric_power

#	modifier@consumption_of_provisions_modifier
#	modifier@provision_income_modifier
#	modifier@max_provision
#	modifier@num_generation_provision_weekly
#	modifier@num_generation_provision_yearly
#	modifier@num_generation_provision_yearly_factor
#	modifier@monthly_save_provision_modifier

#	modifier@num_change_population_weekly

#	modifier@mobilization_speed_proletariat
#	modifier@proletariat_factor
#	modifier@num_proletariat_k
#	modifier@num_proletariat_private_k
#	modifier@interest_in_economic_development_factor

#	modifier@num_generation_science_point
#	modifier@num_generation_science_point_factor

#	modifier@capitalist_activity_modifier


default_party_popularity_PP_gain = {
	if = {
		limit								= { NOT = { has_dynamic_modifier = { modifier = party_popularity_dynamic_modifier } } }
		clear_variable						= political_power_ideology
		hidden_effect						= {
			add_dynamic_modifier			= { modifier = party_popularity_dynamic_modifier }
			force_update_dynamic_modifier	= yes
		}
	}
}

calculate_electric_power_effect = {

### ПРОИЗВОДСТВО ###
	while_loop_effect			= { limit = { thermal_power_plant > var:thermal_power_plant_@THIS }	add_to_temp_variable = { thermal_power_plant_@THIS = 1 } }
	while_loop_effect			= { limit = { hydro_power_plant > var:hydro_power_plant_@THIS }		add_to_temp_variable = { hydro_power_plant_@THIS = 1 } }
	while_loop_effect			= { limit = { nuclear_power_plant > var:nuclear_power_plant_@THIS }	add_to_temp_variable = { nuclear_power_plant_@THIS = 1 } }
	set_variable				= { thermal_power_plant_total = thermal_power_plant_@THIS }		# для текста
	set_temp_variable			= { electric_power_thermal_generation_fuel_need_var = thermal_power_plant_@THIS }
	multiply_temp_variable		= { electric_power_thermal_generation_fuel_need_var = 24 }
	set_temp_variable			= { total_fuel_temp = fuel_k }
#	log = "[GetDateText]: [This.GetName] ([This.GetTag]): FUEL TOTAL: [?total_fuel_temp]"
	multiply_temp_variable		= { total_fuel_temp = 1000 }
#	log = "[GetDateText]: [This.GetName] ([This.GetTag]): FUEL TOTAL_K: [?total_fuel_temp]"
	subtract_from_temp_variable	= { total_fuel_temp = electric_power_thermal_generation_fuel_need_var }
	if = {
		limit					= { check_variable = { total_fuel_temp > 0 } }
		set_variable			= { electric_power_thermal_generation_var = thermal_power_plant_@THIS }
		set_variable			= { thermal_power_plant_ok = thermal_power_plant_@THIS }
#		log = "[GetDateText]: [This.GetName] ([This.GetTag]): FUEL OK // thermal_power_plant OK: [?thermal_power_plant_ok]"
		
		else = {
			set_temp_variable		= { num_power_thermal_generation_fuel_ok = fuel_k }
			multiply_temp_variable	= { num_power_thermal_generation_fuel_ok = 1000 }
			divide_temp_variable	= { num_power_thermal_generation_fuel_ok = 24 }
			round_temp_variable		= num_power_thermal_generation_fuel_ok
			set_variable			= { electric_power_thermal_generation_var = num_power_thermal_generation_fuel_ok }
			set_variable			= { thermal_power_plant_ok = num_power_thermal_generation_fuel_ok }
#			log = "[GetDateText]: [This.GetName] ([This.GetTag]): FUEL SHORTAGE // thermal_power_plant OK: [?thermal_power_plant_ok]"
		}
	}
	multiply_variable	= { electric_power_thermal_generation_var = 60 }						# для текста ТЭС
	set_variable		= { electric_power_hydro_generation_var = hydro_power_plant_@THIS }
	multiply_variable	= { electric_power_hydro_generation_var = 150 }							# для текста ГЭС
	set_variable		= { electric_power_nuclear_generation_var = nuclear_power_plant_@THIS }
	multiply_variable	= { electric_power_nuclear_generation_var = 500 }						# для текста АЭС


	set_variable		= { num_generation_electric_power_factor = 1 }
	add_to_variable		= { num_generation_electric_power_factor = modifier@num_generation_electric_power_factor }
	
	set_variable		= { electric_power_total_generation_var = modifier@num_generation_electric_power }		# РЕАЛЬНЫЕ ВЫЧИСЛЕНИЯ
	multiply_variable	= { electric_power_total_generation_var = num_generation_electric_power_factor }
#	set_variable		= { electric_power_total_generation_var = electric_power_thermal_generation_var }
#	add_to_variable		= { electric_power_total_generation_var = electric_power_hydro_generation_var }
#	add_to_variable		= { electric_power_total_generation_var = electric_power_nuclear_generation_var }
	
	if = {
		limit					= { NOT = { has_dynamic_modifier = { modifier = thermal_power_plant_fuel_cost_dyn } } }
		add_dynamic_modifier	= { modifier = thermal_power_plant_fuel_cost_dyn }
	}
	set_variable				= { fuel_cost_var = thermal_power_plant_ok }
	multiply_variable			= { fuel_cost_var = 1 }	# в час = 24 в сутки



### ЗАТРАТЫ ### (для текста)

# Госаппарат
	set_temp_variable			= { state_power_cost_temp = num_controlled_states }
	multiply_temp_variable		= { state_power_cost_temp = 1 }
	set_variable				= { electric_power_cost_state_var = state_power_cost_temp }
	add_to_variable				= { electric_power_cost_state_var = 3 }
	if = {
		limit					= { has_intelligence_agency = yes }
		add_to_variable			= { electric_power_cost_state_var = 5 }
		set_temp_variable		= { state_power_cost_temp2 = agency_upgrade_number }
		multiply_temp_variable	= { state_power_cost_temp2 = 0.5 }
		add_to_variable			= { electric_power_cost_state_var = state_power_cost_temp2 }
	}
	
# Инфра
	while_loop_effect		= { limit = { infrastructure > var:infrastructure_@THIS }			add_to_temp_variable = { infrastructure_@THIS = 1 } }
	while_loop_effect		= { limit = { hospital > var:hospital_@THIS }						add_to_temp_variable = { hospital_@THIS = 1 } }
	set_variable			= { electric_power_cost_infrastructure_var = infrastructure_@THIS }
	add_to_variable			= { electric_power_cost_infrastructure_var = hospital_@THIS }

# Фабрики
	while_loop_effect		= { limit = { arms_factory > var:arms_factory_@THIS }				add_to_temp_variable = { arms_factory_@THIS = 1 } }
	while_loop_effect		= { limit = { industrial_complex > var:industrial_complex_@THIS }	add_to_temp_variable = { industrial_complex_@THIS = 1 } }
	while_loop_effect		= { limit = { dockyard > var:dockyard_@THIS }						add_to_temp_variable = { dockyard_@THIS = 1 } }
	while_loop_effect		= { limit = { universal_factory > var:universal_factory_@THIS }		add_to_temp_variable = { universal_factory_@THIS = 1 } }
	set_temp_variable		= { arms_factory_temp = arms_factory_@THIS }
	multiply_temp_variable	= { arms_factory_temp = 6 }
	set_temp_variable		= { industrial_complex_temp = industrial_complex_@THIS }
	multiply_temp_variable	= { industrial_complex_temp = 5 }
	set_temp_variable		= { dockyard_temp = dockyard_@THIS }
	multiply_temp_variable	= { dockyard_temp = 7 }
	set_temp_variable		= { universal_factory_temp = universal_factory_@THIS }
	multiply_temp_variable	= { universal_factory_temp = 11 }
	
	set_variable			= { electric_power_cost_factory_var = arms_factory_temp }
	add_to_variable			= { electric_power_cost_factory_var = industrial_complex_temp }
	add_to_variable			= { electric_power_cost_factory_var = dockyard_temp }
	add_to_variable			= { electric_power_cost_factory_var = universal_factory_temp }

# Снабжение
	while_loop_effect		= { limit = { supply_node > var:supply_node_@THIS }			add_to_temp_variable = { supply_node_@THIS = 1 } }
	while_loop_effect		= { limit = { naval_base > var:naval_base_@THIS }			add_to_temp_variable = { naval_base_@THIS = 1 } }
	set_temp_variable		= { supply_node_temp = supply_node_@THIS }
	multiply_temp_variable	= { supply_node_temp = 2 }
	set_temp_variable		= { naval_base_temp = naval_base_@THIS }
	multiply_temp_variable	= { naval_base_temp = 0.5 }
	
	set_variable			= { electric_power_cost_supply_var = supply_node_temp }
	add_to_variable			= { electric_power_cost_supply_var = naval_base_temp }

# Сооружения военного назначения
	while_loop_effect		= { limit = { anti_air_building > var:anti_air_building_@THIS }	add_to_temp_variable = { anti_air_building_@THIS = 1 } }
	while_loop_effect		= { limit = { air_base > var:air_base_@THIS }					add_to_temp_variable = { air_base_@THIS = 1 } }
	while_loop_effect		= { limit = { bunker > var:bunker_@THIS }						add_to_temp_variable = { bunker_@THIS = 1 } }
	while_loop_effect		= { limit = { coastal_bunker > var:coastal_bunker_@THIS }		add_to_temp_variable = { coastal_bunker_@THIS = 1 } }
	while_loop_effect		= { limit = { radar_station > var:radar_station_@THIS }			add_to_temp_variable = { radar_station_@THIS = 1 } }
	while_loop_effect		= { limit = { rocket_site > var:rocket_site_@THIS }				add_to_temp_variable = { rocket_site_@THIS = 1 } }
	set_temp_variable		= { anti_air_building_temp = anti_air_building_@THIS }
	add_to_temp_variable	= { anti_air_building_temp = air_base_@THIS }
	multiply_temp_variable	= { anti_air_building_temp = 0.5 }
	set_temp_variable		= { bunker_temp = bunker_@THIS }
	add_to_temp_variable	= { bunker_temp = coastal_bunker_@THIS }
	multiply_temp_variable	= { bunker_temp = 0.1 }
	set_temp_variable		= { radar_station_temp = radar_station_@THIS }
	add_to_temp_variable	= { radar_station_temp = rocket_site_@THIS }
	multiply_temp_variable	= { radar_station_temp = 1.5 }
	
	set_variable			= { electric_power_cost_army_var = anti_air_building_temp }
	add_to_variable			= { electric_power_cost_army_var = bunker_temp }
	add_to_variable			= { electric_power_cost_army_var = radar_station_temp }

# Другие
	while_loop_effect		= { limit = { synthetic_refinery > var:synthetic_refinery_@THIS }	add_to_temp_variable = { synthetic_refinery_@THIS = 1 } }
	while_loop_effect		= { limit = { fuel_silo > var:fuel_silo_@THIS }						add_to_temp_variable = { fuel_silo_@THIS = 1 } }
	while_loop_effect		= { limit = { nuclear_reactor > var:nuclear_reactor_@THIS }			add_to_temp_variable = { nuclear_reactor_@THIS = 1 } }
	while_loop_effect		= { limit = { agro_complex > var:agro_complex_@THIS }				add_to_temp_variable = { agro_complex_@THIS = 1 } }
	while_loop_effect		= { limit = { livestock_complex > var:livestock_complex_@THIS }		add_to_temp_variable = { livestock_complex_@THIS = 1 } }
	set_temp_variable		= { synthetic_refinery_temp = synthetic_refinery_@THIS }
	multiply_temp_variable	= { synthetic_refinery_temp = 4 }
	set_temp_variable		= { fuel_silo_temp = fuel_silo_@THIS }
	add_to_temp_variable	= { fuel_silo_temp = livestock_complex_@THIS }
	multiply_temp_variable	= { fuel_silo_temp = 0.5 }
	set_temp_variable		= { agro_complex_temp = agro_complex_@THIS }
	multiply_temp_variable	= { agro_complex_temp = 0.25 }
	set_temp_variable		= { nuclear_reactor_temp = nuclear_reactor_@THIS }
	multiply_temp_variable	= { nuclear_reactor_temp = 15 }
	
	set_variable			= { electric_power_cost_other_var = synthetic_refinery_temp }
	add_to_variable			= { electric_power_cost_other_var = fuel_silo_temp }
	add_to_variable			= { electric_power_cost_other_var = agro_complex_temp }
	add_to_variable			= { electric_power_cost_other_var = nuclear_reactor_temp }

# Сталь
	while_loop_effect		= { limit = { steel_mill > var:steel_mill_@THIS }	add_to_temp_variable = { steel_mill_@THIS = 1 } }
	set_variable			= { steel_mill_total = steel_mill_@THIS }
	set_variable			= { steel_mill_ok = steel_mill_@THIS }
	set_temp_variable		= { steel_mill_temp = steel_mill_@THIS }
	multiply_temp_variable	= { steel_mill_temp = 3.5 }
	
	set_variable			= { electric_power_cost_mill_var = steel_mill_temp }
	add_to_variable			= { electric_power_cost_mill_var = steel_return_electric_power_var }

# Ресурсы
	set_temp_variable			= { resource_produced_power_cost_temp = 0 }
	if = {
		limit					= { check_variable = { resource_produced@aluminium > 0 } }
		add_to_temp_variable	= { resource_produced_power_cost_temp = resource_produced@aluminium }
	}
	if = {
		limit					= { check_variable = { resource_produced@oil > 0 } }
		add_to_temp_variable	= { resource_produced_power_cost_temp = resource_produced@oil }
	}
	if = {
		limit					= { check_variable = { resource_produced@tungsten > 0 } }
		add_to_temp_variable	= { resource_produced_power_cost_temp = resource_produced@tungsten }
	}
	if = {
		limit					= { check_variable = { resource_produced@rubber > 0 } }
		add_to_temp_variable	= { resource_produced_power_cost_temp = resource_produced@rubber }
	}
	if = {
		limit					= { check_variable = { resource_produced@chromium > 0 } }
		add_to_temp_variable	= { resource_produced_power_cost_temp = resource_produced@chromium }
	}
	if = {
		limit					= { check_variable = { resource_produced@iron > 0 } }
		add_to_temp_variable	= { resource_produced_power_cost_temp = resource_produced@iron }
	}
#	add_to_temp_variable		= { resource_produced_power_cost_temp = resource_produced@steel }
	multiply_temp_variable		= { resource_produced_power_cost_temp = 0.1 }
	set_variable				= { electric_power_cost_resource_produced_var = resource_produced_power_cost_temp }

# Частники // ушло в sell_private_electric_button_click
#	if = {
#		limit					= { check_variable = { sell_private_electric_button_var = 2 } }
#		set_variable			= { electric_power_cost_private_var = modifier@num_use_electric_power_private }
#	}
	
# Баланс энергии
	set_variable				= { electric_power_cost_var = modifier@num_use_electric_power }
	add_to_variable				= { electric_power_cost_var = electric_power_cost_state_var }
	add_to_variable				= { electric_power_cost_var = electric_power_cost_resource_produced_var }
	add_to_variable				= { electric_power_cost_var = electric_power_cost_private_var }
	
#	set_variable				= { electric_power_cost_var = electric_power_cost_infrastructure_var }
#	add_to_variable				= { electric_power_cost_var = electric_power_cost_factory_var }
#	add_to_variable				= { electric_power_cost_var = electric_power_cost_supply_var }
#	add_to_variable				= { electric_power_cost_var = electric_power_cost_army_var }
#	add_to_variable				= { electric_power_cost_var = electric_power_cost_other_var }
	
	set_variable				= { electric_power_total_var = electric_power_cost_var }
	
	set_variable				= { electric_power_percent_var = electric_power_total_generation_var }
	divide_variable				= { electric_power_percent_var = electric_power_total_var }				# ПАРАМЕТР ТОПБАРА
	multiply_variable			= { electric_power_total_var = -1 }
	add_to_variable				= { electric_power_total_var = electric_power_total_generation_var }
	if = {
		limit					= { check_variable = { electric_power_percent_var < 0 } }
		set_variable			= { electric_power_percent_var = 0 }
	}
}


calculate_electric_power_LOG_effect = {
	while_loop_effect			= { limit = { thermal_power_plant > var:thermal_power_plant_@THIS }	add_to_temp_variable = { thermal_power_plant_@THIS = 1 } }
	while_loop_effect			= { limit = { hydro_power_plant > var:hydro_power_plant_@THIS }		add_to_temp_variable = { hydro_power_plant_@THIS = 1 } }
	while_loop_effect			= { limit = { nuclear_power_plant > var:nuclear_power_plant_@THIS }	add_to_temp_variable = { nuclear_power_plant_@THIS = 1 } }
	set_temp_variable			= { electric_power_thermal_generation_fuel_need_var = thermal_power_plant_@THIS }
	multiply_temp_variable		= { electric_power_thermal_generation_fuel_need_var = 24 }
	set_temp_variable			= { total_fuel_temp = fuel_k }
	log = "[GetDateText]: [This.GetName] ([This.GetTag]): FUEL TOTAL: [?total_fuel_temp]"
	multiply_temp_variable		= { total_fuel_temp = 1000 }
	log = "[GetDateText]: [This.GetName] ([This.GetTag]): FUEL TOTAL_K: [?total_fuel_temp]"
	subtract_from_temp_variable	= { total_fuel_temp = electric_power_thermal_generation_fuel_need_var }
	if = {
		limit					= { check_variable = { total_fuel_temp > 0 } }
		set_temp_variable		= { thermal_power_plant_ok_temp = thermal_power_plant_@THIS }
		log = "[GetDateText]: [This.GetName] ([This.GetTag]): FUEL OK // thermal_power_plant OK: [?thermal_power_plant_ok_temp]"
		
		else = {
			set_temp_variable		= { num_power_thermal_generation_fuel_ok = fuel_k }
			multiply_temp_variable	= { num_power_thermal_generation_fuel_ok = 1000 }
			divide_temp_variable	= { num_power_thermal_generation_fuel_ok = 24 }
			round_temp_variable		= num_power_thermal_generation_fuel_ok
			set_temp_variable		= { thermal_power_plant_ok_temp = num_power_thermal_generation_fuel_ok }
			log = "[GetDateText]: [This.GetName] ([This.GetTag]): FUEL SHORTAGE // thermal_power_plant OK: [?thermal_power_plant_ok_temp]"
		}
	}
}


calculate_electric_power_dyn = {
	if = {
		limit						= { check_variable = { electric_power_percent_var < 1 } }
		if = {
			limit					= { NOT = { has_dynamic_modifier = { modifier = electric_power_dyn } } }
			add_dynamic_modifier	= { modifier = electric_power_dyn }
		}
	
		set_temp_variable			= { electric_power_debuff = -1 }
		add_to_temp_variable		= { electric_power_debuff = electric_power_percent_var }

		set_temp_variable			= { summ_tumbler_temp = electric_power_tumbler_icon_1_frame }	# АРМИЯ
		add_to_temp_variable		= { summ_tumbler_temp = electric_power_tumbler_icon_2_frame }	# ПРОВИЗИЯ
		add_to_temp_variable		= { summ_tumbler_temp = electric_power_tumbler_icon_3_frame }	# ИССЛЕДОВАНИЯ
		add_to_temp_variable		= { summ_tumbler_temp = electric_power_tumbler_icon_4_frame }	# ФАБРИКИ
		add_to_temp_variable		= { summ_tumbler_temp = electric_power_tumbler_icon_5_frame }	# СТРОИТЕЛЬСТВО
		add_to_temp_variable		= { summ_tumbler_temp = electric_power_tumbler_icon_6_frame }	# ПЕРЕРАБОТКА НЕФТИ
		add_to_temp_variable		= { summ_tumbler_temp = electric_power_tumbler_icon_7_frame }	# ДОБЫЧА РЕСУРСОВ
# 1 АРМИЯ // ARMY
		set_temp_variable			= { ARMY_tumbler_1_debuff_temp	= 1 }
		set_temp_variable			= { ARMY_tumbler_1_debuff_temp2	= electric_power_tumbler_icon_1_frame }
		divide_temp_variable		= { ARMY_tumbler_1_debuff_temp2	= summ_tumbler_temp }
		subtract_from_temp_variable	= { ARMY_tumbler_1_debuff_temp	= ARMY_tumbler_1_debuff_temp2 }
		multiply_temp_variable		= { ARMY_tumbler_1_debuff_temp	= electric_power_debuff }							# ИТОГОВЫЙ ДЕБАФ (-число)
		
		set_variable				= { electric_power_planning_cryption_factor_var	= ARMY_tumbler_1_debuff_temp }
		set_variable				= { electric_power_coordination_bonus_var		= 0.175 }							# БАЗА КООРДИНАЦИИ = 35%*0,5
		multiply_variable			= { electric_power_coordination_bonus_var		= ARMY_tumbler_1_debuff_temp }
		set_variable				= { electric_power_mobilization_speed_var		= ARMY_tumbler_1_debuff_temp }
		multiply_variable			= { electric_power_mobilization_speed_var		= 0.25 }
# 2 ПРОВИЗИЯ // PROVISION
		set_temp_variable			= { PROVISION_tumbler_2_debuff_temp		= 1 }
		set_temp_variable			= { PROVISION_tumbler_2_debuff_temp2	= electric_power_tumbler_icon_2_frame }
		divide_temp_variable		= { PROVISION_tumbler_2_debuff_temp2	= summ_tumbler_temp }
		subtract_from_temp_variable	= { PROVISION_tumbler_2_debuff_temp		= PROVISION_tumbler_2_debuff_temp2 }
		multiply_temp_variable		= { PROVISION_tumbler_2_debuff_temp		= electric_power_debuff }					# ИТОГОВЫЙ ДЕБАФ (-число)
		
		set_variable				= { electric_power_provision_weekly_factor_var	= PROVISION_tumbler_2_debuff_temp }
		multiply_variable			= { electric_power_provision_weekly_factor_var	= 0.5 }
# 3 ИССЛЕДОВАНИЯ // RESEARCH
		set_temp_variable			= { RESEARCH_tumbler_3_debuff_temp		= 1 }
		set_temp_variable			= { RESEARCH_tumbler_3_debuff_temp2		= electric_power_tumbler_icon_3_frame }
		divide_temp_variable		= { RESEARCH_tumbler_3_debuff_temp2		= summ_tumbler_temp }
		subtract_from_temp_variable	= { RESEARCH_tumbler_3_debuff_temp		= RESEARCH_tumbler_3_debuff_temp2 }
		multiply_temp_variable		= { RESEARCH_tumbler_3_debuff_temp		= electric_power_debuff }					# ИТОГОВЫЙ ДЕБАФ (-число)
		
		set_variable				= { electric_power_research_speed_factor_var	= RESEARCH_tumbler_3_debuff_temp }
# 4 ФАБРИКИ // INDUSTRIAL
		set_temp_variable			= { INDUSTRIAL_tumbler_4_debuff_temp	= 1 }
		set_temp_variable			= { INDUSTRIAL_tumbler_4_debuff_temp2	= electric_power_tumbler_icon_4_frame }
		divide_temp_variable		= { INDUSTRIAL_tumbler_4_debuff_temp2	= summ_tumbler_temp }
		subtract_from_temp_variable	= { INDUSTRIAL_tumbler_4_debuff_temp	= INDUSTRIAL_tumbler_4_debuff_temp2 }
		multiply_temp_variable		= { INDUSTRIAL_tumbler_4_debuff_temp	= electric_power_debuff }					# ИТОГОВЫЙ ДЕБАФ (-число)
		
		set_variable				= { electric_power_industrial_capacity_var	= INDUSTRIAL_tumbler_4_debuff_temp }
# 5 СТРОИТЕЛЬСТВО // BUILDING
		set_temp_variable			= { BUILDING_tumbler_5_debuff_temp	= 1 }
		set_temp_variable			= { BUILDING_tumbler_5_debuff_temp2	= electric_power_tumbler_icon_5_frame }
		divide_temp_variable		= { BUILDING_tumbler_5_debuff_temp2	= summ_tumbler_temp }
		subtract_from_temp_variable	= { BUILDING_tumbler_5_debuff_temp	= BUILDING_tumbler_5_debuff_temp2 }
		multiply_temp_variable		= { BUILDING_tumbler_5_debuff_temp	= electric_power_debuff }						# ИТОГОВЫЙ ДЕБАФ (-число)
		
		set_variable				= { electric_power_production_speed_buildings_factor_var	= BUILDING_tumbler_5_debuff_temp }
# 6 ПЕРЕРАБОТКА НЕФТИ // FUEL
		set_temp_variable			= { FUEL_tumbler_6_debuff_temp	= 1 }
		set_temp_variable			= { FUEL_tumbler_6_debuff_temp2	= electric_power_tumbler_icon_6_frame }
		divide_temp_variable		= { FUEL_tumbler_6_debuff_temp2	= summ_tumbler_temp }
		subtract_from_temp_variable	= { FUEL_tumbler_6_debuff_temp	= FUEL_tumbler_6_debuff_temp2 }
		multiply_temp_variable		= { FUEL_tumbler_6_debuff_temp	= electric_power_debuff }							# ИТОГОВЫЙ ДЕБАФ (-число)
		
		set_variable				= { electric_power_fuel_gain_factor_var	= FUEL_tumbler_6_debuff_temp }
# 7 ДОБЫЧА РЕСУРСОВ // RESOURCE
		set_temp_variable			= { RESOURCE_tumbler_7_debuff_temp	= 1 }
		set_temp_variable			= { RESOURCE_tumbler_7_debuff_temp2	= electric_power_tumbler_icon_7_frame }
		divide_temp_variable		= { RESOURCE_tumbler_7_debuff_temp2	= summ_tumbler_temp }
		subtract_from_temp_variable	= { RESOURCE_tumbler_7_debuff_temp	= RESOURCE_tumbler_7_debuff_temp2 }
		multiply_temp_variable		= { RESOURCE_tumbler_7_debuff_temp	= electric_power_debuff }						# ИТОГОВЫЙ ДЕБАФ (-число)
		
		set_variable				= { electric_power_local_resources_factor_var	= RESOURCE_tumbler_7_debuff_temp }
		multiply_variable			= { electric_power_local_resources_factor_var	= 0.5 }
	}
	else = {
		clear_variable				= electric_power_planning_cryption_factor_var
		clear_variable				= electric_power_coordination_bonus_var
		clear_variable				= electric_power_mobilization_speed_var
		clear_variable				= electric_power_provision_weekly_factor_var
		clear_variable				= electric_power_research_speed_factor_var
		clear_variable				= electric_power_industrial_capacity_var
		clear_variable				= electric_power_production_speed_buildings_factor_var
		clear_variable				= electric_power_fuel_gain_factor_var
		clear_variable				= electric_power_local_resources_factor_var
	}
	force_update_dynamic_modifier = yes
}

AI_set_electric_panel_effect = {
	if = {
		limit						= { is_ai = yes }
		set_variable				= { electric_power_tumbler_icon_1_frame = 1 }
		set_variable				= { electric_power_tumbler_icon_2_frame = 1 }
		set_variable				= { electric_power_tumbler_icon_3_frame = 1 }
		set_variable				= { electric_power_tumbler_icon_4_frame = 1 }
		set_variable				= { electric_power_tumbler_icon_5_frame = 1 }
		set_variable				= { electric_power_tumbler_icon_6_frame = 1 }
		set_variable				= { electric_power_tumbler_icon_7_frame = 1 }
	}
}

calculate_electric_power_trade_effect = {
	if = {
		limit						= { NOT = { has_dynamic_modifier = { modifier = electro_power_trade_cost_dyn } } }
		add_dynamic_modifier		= { modifier = electro_power_trade_cost_dyn }
	}
	set_temp_variable				= { num_electro_export_temp = num_electro_export_var }
	multiply_temp_variable			= { num_electro_export_temp = -1 }
	set_variable					= { num_generation_electric_power_cost_var = num_electro_export_temp }
	force_update_dynamic_modifier	= yes
	
	calculate_electric_power_effect	= yes
	calculate_electric_power_dyn	= yes
}



calculate_provision_start_effect = {
	set_variable			= { max_provision_base_var = 1000 }										# БАЗА МАКСИМУМА ПРОВИЗИИ
	set_variable			= { provision_need_base_var = 0.254 }									# БАЗА ПОТРЕБЛЕНИЯ ПРОВИЗИИ = 254 кг в год на человека
	
	while_loop_effect		= { limit = { agro_complex > var:agro_complex_@THIS }			add_to_temp_variable = { agro_complex_@THIS = 1 } }
	while_loop_effect		= { limit = { livestock_complex > var:livestock_complex_@THIS }	add_to_temp_variable = { livestock_complex_@THIS = 1 } }

# НАЧАЛЬНАЯ ПРОВИЗИЯ
#	set_temp_variable		= { temp1 = agro_complex_@THIS }
#	multiply_temp_variable	= { temp1 = 300 }
#	set_temp_variable		= { temp2 = livestock_complex_@THIS }
#	multiply_temp_variable	= { temp2 = 15.2 }
#	set_variable			= { provision_total_var = temp1 }
#	add_to_variable			= { provision_total_var = temp2 }
	
#	set_temp_variable		= { temp1 = modifier@num_generation_provision_yearly }
	
	every_controlled_state = {
		limit = {
			is_fully_controlled_by = PREV
			check_variable = { modifier@num_generation_provision_yearly > 0 }
		}
		set_temp_variable			= { PYtemp = 1 }
		subtract_from_temp_variable	= { PYtemp = TOTAL_state_soil_depletion_var }
		multiply_temp_variable		= { PYtemp = modifier@num_generation_provision_yearly }
		multiply_temp_variable		= { PYtemp = TOTAL_state_fertility }
		add_to_variable				= { PREV.temp_var = PYtemp }
	}
	set_temp_variable		= { temp1 = temp_var }
	clear_variable			= temp_var
	
	set_temp_variable		= { temp3 = 1 }
	add_to_temp_variable	= { temp3 = modifier@num_generation_provision_yearly_factor }
	multiply_temp_variable	= { temp1 = temp3 }
	
	set_temp_variable		= { temp2 = modifier@num_generation_provision_weekly }
	multiply_temp_variable	= { temp2 = 4 }
	set_variable			= { provision_total_var = temp1 }
	add_to_variable			= { provision_total_var = temp2 }
	
	
# ЗАТРАТЫ ПРОВИЗИИ
	set_temp_variable		= { provision_need_temp = max_manpower_k }
	multiply_temp_variable	= { provision_need_temp = provision_need_base_var }
	divide_temp_variable	= { provision_need_temp = 4800 }
	### БАФЫ
	set_temp_variable		= { consumption_of_provisions_temp = provision_need_temp }
	multiply_temp_variable	= { consumption_of_provisions_temp = modifier@consumption_of_provisions_modifier }
	add_to_temp_variable	= { provision_need_temp = consumption_of_provisions_temp }
	###
	set_variable			= { provision_need_var = provision_need_temp }								# для текста
#	subtract_from_variable	= { provision_total_var = provision_need_temp }					# не нужно вычитать потребление в 0 день

# ЖИВОТНАВОДСТВО
#	set_temp_variable		= { weekly_income_provision_temp = livestock_complex_total }
#	multiply_temp_variable	= { weekly_income_provision_temp = 3.8 }
	set_variable			= { weekly_income_provision = modifier@num_generation_provision_weekly }	# для текста

	set_temp_variable		= { income_temp1 = weekly_income_provision }
	set_temp_variable		= { weekly_income_delta = modifier@provision_income_modifier }
	multiply_temp_variable	= { weekly_income_delta = weekly_income_provision }
	subtract_from_variable	= { weekly_income_delta = income_temp1 }
	add_to_variable			= { weekly_income_provision = weekly_income_delta }							# БАФ/ДЕБАФ

# ПОЛЯ
#	set_temp_variable		= { yearly_income_provision_temp = agro_complex_total }
#	multiply_temp_variable	= { yearly_income_provision_temp = 300 }
	set_variable			= { yearly_income_provision = temp1 }										# для текста
	
	set_temp_variable		= { income_temp1 = yearly_income_provision }
	set_temp_variable		= { yearly_income_delta = modifier@provision_income_modifier }
	multiply_temp_variable	= { yearly_income_delta = yearly_income_provision }
	subtract_from_variable	= { yearly_income_delta = income_temp1 }
	add_to_variable			= { yearly_income_provision = yearly_income_delta }							# БАФ/ДЕБАФ

# ЭЛЕВАТОРЫ
#	set_temp_variable		= { monthly_save_provision_temp = agro_silo_total }
#	multiply_temp_variable	= { monthly_save_provision_temp = 0.01 }
	set_temp_variable		= { monthly_save_provision_temp = modifier@monthly_save_provision_modifier }
	add_to_temp_variable	= { monthly_save_provision_temp = 0.7 }
	if = {
		limit				= { check_variable = { monthly_save_provision_temp > 0.99 } }
		set_temp_variable	= { monthly_save_provision_temp = 0.99 }
	}
	set_variable			= { monthly_save_provision = monthly_save_provision_temp }					# для текста
	
	set_variable			= { max_provision_total_var = max_provision_base_var }
	add_to_variable			= { max_provision_total_var = modifier@max_provision }
	clamp_variable			= { var = provision_total_var min = 0 max = max_provision_total_var }
	
# ПАРАМЕТР ТОПБАРА
	set_variable			= { provision_balance_var = weekly_income_provision }
	divide_variable			= { provision_balance_var = 7 }
	subtract_from_variable	= { provision_balance_var = provision_need_temp }							# для текста
	
	if = {
		limit				= { check_variable = { provision_total_var < 0 } }
		set_variable		= { provision_total_var = 0 }
		
		set_variable		= { provision_percent_var = provision_balance_var }
		divide_variable		= { provision_percent_var = provision_need_temp }							# для текста
		else = {
			set_variable	= { provision_percent_var = provision_total_var }
			divide_variable	= { provision_percent_var = provision_need_temp }							# для текста
		}
	}
	
	clamp_variable			= { var = provision_total_var min = 0 max = max_provision_total_var }
	set_variable			= { provision_percent_to_max_var = provision_total_var }
	divide_variable			= { provision_percent_to_max_var = max_provision_total_var }				# для текста
	
	set_variable			= { provision_ratio_var = provision_percent_to_max_var }
	multiply_variable		= { provision_ratio_var = 100 }												# для ГУИ
	
	if = {
		limit				= { check_variable = { provision_percent_var < 0 } }
		set_variable		= { provision_percent_var = 0 }
	}
	
	set_variable			= { provision_delta_var = provision_total_var }
	subtract_from_variable	= { provision_delta_var = provision_ex_delta_var }							# для текста ?
	set_variable			= { provision_ex_delta_var = provision_total_var }
	
	set_variable			= { provision_days_var = provision_percent_var }							# для текста
	set_variable			= { provision_month_var = provision_days_var }
	divide_variable			= { provision_month_var = 30 }												# для текста
	set_variable			= { provision_year_var = provision_month_var }
	divide_variable			= { provision_year_var = 12 }												# для текста
	
	set_variable			= { provision_goal_var = provision_total_var }
	if = {
		limit = {
			check_variable			= { provision_goal_var > 0 }
		}
		set_temp_variable			= { provision_goal_var_temp = 1 }
		subtract_from_temp_variable	= { provision_goal_var_temp = monthly_save_provision }
		multiply_temp_variable		= { provision_goal_var_temp = provision_goal_var }
		set_variable				= { bad_provision_var = provision_goal_var_temp }
	}
	
	set_variable			= { chance_of_crop_failure_var = 33 }
	
### ГОЛОД БАЗА
	set_variable			= { hunger_stability_weekly_var = -0.005 }
	set_variable			= { hunger_monthly_population_var = -1 }
	set_variable			= { hunger_change_population_weekly_var = -0.005 }
	set_variable			= { hunger_industrial_capacity_var = -0.025 }
	set_variable			= { hunger_production_factory_efficiency_gain_factor_var = -0.05 }
	set_variable			= { hunger_production_speed_buildings_factor_var = -0.035 }
	set_variable			= { hunger_research_speed_factor_var = -0.04 }
}

calculate_provision_daily_effect = {
	set_temp_variable		= { provision_need_temp = max_manpower_k }
	multiply_temp_variable	= { provision_need_temp = provision_need_base_var }
	divide_temp_variable	= { provision_need_temp = 4800 }
	### БАФЫ
	set_temp_variable		= { consumption_of_provisions_temp = provision_need_temp }
	multiply_temp_variable	= { consumption_of_provisions_temp = modifier@consumption_of_provisions_modifier }
	add_to_temp_variable	= { provision_need_temp = consumption_of_provisions_temp }
	###
	set_variable			= { provision_need_var = provision_need_temp }								# для текста
	subtract_from_variable	= { provision_total_var = provision_need_temp }
	
	set_temp_variable		= { provision_need_eq_temp = provision_need_temp }
	multiply_temp_variable	= { provision_need_eq_temp = -1 }

# ПОДСЧЕТ ДЛЯ СТАТЫ
	while_loop_effect		= { limit = { agro_complex > var:agro_complex_@THIS }			add_to_temp_variable = { agro_complex_@THIS = 1 } }
	while_loop_effect		= { limit = { livestock_complex > var:livestock_complex_@THIS }	add_to_temp_variable = { livestock_complex_@THIS = 1 } }
	while_loop_effect		= { limit = { agro_silo > var:agro_silo }						add_to_temp_variable = { agro_silo = 1 } }
	set_variable			= { agro_complex_total = agro_complex_@THIS }
	set_variable			= { livestock_complex_total = livestock_complex_@THIS }
	set_variable			= { agro_silo_total = agro_silo }

# ЖИВОТНАВОДСТВО
#	set_temp_variable		= { weekly_income_provision_temp = livestock_complex_total }
#	multiply_temp_variable	= { weekly_income_provision_temp = 3.8 }
	set_variable			= { weekly_income_provision = modifier@num_generation_provision_weekly }	# для текста
	
	set_temp_variable		= { income_temp1 = weekly_income_provision }
	set_temp_variable		= { weekly_income_delta = modifier@provision_income_modifier }
	multiply_temp_variable	= { weekly_income_delta = weekly_income_provision }
	subtract_from_variable	= { weekly_income_delta = income_temp1 }
	add_to_variable			= { weekly_income_provision = weekly_income_delta }							# БАФ/ДЕБАФ

# ПОЛЯ
#	set_temp_variable		= { yearly_income_provision_temp = agro_complex_total }
#	multiply_temp_variable	= { yearly_income_provision_temp = 300 }
	set_variable			= { num_generation_provision_yearly_var = 1 }
	add_to_variable			= { num_generation_provision_yearly_var = modifier@num_generation_provision_yearly_factor }
	
#	set_temp_variable		= { temp1 = modifier@num_generation_provision_yearly }
	
	every_controlled_state = {
		limit = {
			is_fully_controlled_by = PREV
			check_variable = { modifier@num_generation_provision_yearly > 0 }
		}
		set_temp_variable			= { PYtemp = 1 }
		subtract_from_temp_variable	= { PYtemp = TOTAL_state_soil_depletion_var }
		multiply_temp_variable		= { PYtemp = modifier@num_generation_provision_yearly }
		multiply_temp_variable		= { PYtemp = TOTAL_state_fertility }
		add_to_variable				= { PREV.temp_var = PYtemp }
	}
	set_temp_variable		= { temp1 = temp_var }
	clear_variable			= temp_var
	multiply_temp_variable	= { temp1 = num_generation_provision_yearly_var }
	set_variable			= { yearly_income_provision = temp1 }										# для текста
	
	set_temp_variable		= { income_temp1 = yearly_income_provision }
	set_temp_variable		= { yearly_income_delta = modifier@provision_income_modifier }
	multiply_temp_variable	= { yearly_income_delta = yearly_income_provision }
	subtract_from_variable	= { yearly_income_delta = income_temp1 }
	add_to_variable			= { yearly_income_provision = yearly_income_delta }							# БАФ/ДЕБАФ

# ЭЛЕВАТОРЫ
#	set_temp_variable		= { monthly_save_provision_temp = agro_silo_total }
#	multiply_temp_variable	= { monthly_save_provision_temp = 0.01 }
	set_temp_variable		= { monthly_save_provision_temp = modifier@monthly_save_provision_modifier }
	add_to_temp_variable	= { monthly_save_provision_temp = 0.7 }
	if = {
		limit				= { check_variable = { monthly_save_provision_temp > 0.99 } }
		set_temp_variable	= { monthly_save_provision_temp = 0.99 }
	}
	set_variable			= { monthly_save_provision = monthly_save_provision_temp }					# для текста
	
	set_variable			= { max_provision_total_var = max_provision_base_var }
	add_to_variable			= { max_provision_total_var = modifier@max_provision }
	clamp_variable			= { var = provision_total_var min = 0 max = max_provision_total_var }
	
# ПАРАМЕТР ТОПБАРА
	set_variable			= { provision_balance_var = weekly_income_provision }
	divide_variable			= { provision_balance_var = 7 }
	subtract_from_variable	= { provision_balance_var = provision_need_temp }				# для текста
	
	if = {
		limit				= { check_variable = { provision_total_var < 0 } }
		set_variable		= { provision_total_var = 0 }
		
		set_variable		= { provision_percent_var = provision_balance_var }
		divide_variable		= { provision_percent_var = provision_need_temp }					# для текста
		else = {
			set_variable	= { provision_percent_var = provision_total_var }
			divide_variable	= { provision_percent_var = provision_need_temp }				# для текста
		}
	}
	
	clamp_variable			= { var = provision_total_var min = 0 max = max_provision_total_var }
	
	if = {
		limit				= { check_variable = { provision_percent_var < 0 } }
		set_variable		= { provision_percent_var = 0 }
	}
	
	set_variable			= { provision_delta_var = provision_total_var }
	subtract_from_variable	= { provision_delta_var = provision_ex_delta_var }				# для текста
	set_variable			= { provision_ex_delta_var = provision_total_var }
	
	if = {
		limit				= { check_variable = { provision_delta_var < 0 } }
		set_variable		= { provision_frame_var = 3 }
		else_if = {
			limit			= { check_variable = { provision_delta_var > 0 } }
			set_variable	= { provision_frame_var = 2 }
		}
		else				= { set_variable = { provision_frame_var = 1 } }
	}
	
	set_variable			= { provision_percent_to_max_var = provision_total_var }
	divide_variable			= { provision_percent_to_max_var = max_provision_total_var }			# для текста
	
	set_variable			= { provision_ratio_var = provision_percent_to_max_var }
	multiply_variable		= { provision_ratio_var = 100 }										# для ГУИ
	
	set_variable			= { provision_days_var = provision_percent_var }							# для текста
	set_variable			= { provision_month_var = provision_days_var }
	divide_variable			= { provision_month_var = 30 }											# для текста
	set_variable			= { provision_year_var = provision_month_var }
	divide_variable			= { provision_year_var = 12 }											# для текста
	
### ЧЕК ЗАКОНОВ
	if = {
		limit = {
			check_variable	= { var = provision_total_var	value = 0 compare = less_than_or_equals }
			check_variable	= { var = provision_balance_var	value = 0 compare = less_than_or_equals }
		}
		if = {
			limit			= { has_idea = increase_nutrition_standards }
			add_ideas		= self_regulation_of_consumption
			else_if = {
				limit		= { has_idea = subsidies_for_provisions }
				add_ideas	= increase_nutrition_standards
			}
		}
	}
}

calculate_provision_weekly_effect = {
	log = "[GetDateText]: [This.GetName] ([This.GetTag]): provision_need_var: [?provision_need_var]"
	add_to_variable	= { provision_total_var = weekly_income_provision }
	clamp_variable	= { var = provision_total_var min = 0 max = max_provision_total_var }
}

calculate_provision_monthly_effect = {		# порча еды
	if = {
		limit = {
			check_variable			= { provision_total_var > 0 }
			check_variable			= { provision_goal_var > 0 }
		}
		set_temp_variable			= { monthly_bad_provision_temp = 1 }
		subtract_from_temp_variable	= { monthly_bad_provision_temp = monthly_save_provision }
		multiply_temp_variable		= { monthly_bad_provision_temp = provision_goal_var }
		subtract_from_variable		= { provision_total_var = monthly_bad_provision_temp }
		if = {
			limit					= { check_variable = { provision_total_var < 0 } }
			set_variable			= { provision_total_var = 0 }
		}
		
		set_temp_variable			= { monthly_bad_provision_eq_temp = monthly_bad_provision_temp }
		multiply_temp_variable		= { monthly_bad_provision_eq_temp = -1 }
	}
	clamp_variable					= { var = provision_total_var min = 0 max = max_provision_total_var }
	set_variable					= { provision_goal_var = provision_total_var }
	
	if = {
		limit = {
			check_variable			= { provision_goal_var > 0 }
		}
		set_temp_variable			= { provision_goal_var_temp = 1 }
		subtract_from_temp_variable	= { provision_goal_var_temp = monthly_save_provision }
		multiply_temp_variable		= { provision_goal_var_temp = provision_goal_var }
		set_variable				= { bad_provision_var = provision_goal_var_temp }
	}
}


set_sowing_work_has_begun_provision_effect = {
	if = {			### БОБОВЫЕ
		limit = {
			meta_trigger = {
				text = {
					date > [YEAR].2.28
					date < [YEAR].3.2
				}
				YEAR = "[?global.year]"
			}
		}
		every_controlled_state = {
			limit = {
				is_fully_controlled_by = PREV
				has_state_flag = state_culture_LEGUMES_state_flag
			}
			set_state_flag = state_culture_sowing_work_has_begun_state_flag
		}
	}
	else_if = {		### ПШЕНИЦА + КАРТОФЕЛЬ + ХЛОПОК
		limit = {
			meta_trigger = {
				text = {
					date > [YEAR].3.28
					date < [YEAR].4.2
				}
				YEAR = "[?global.year]"
			}
		}
		every_controlled_state = {
			limit = {
				is_fully_controlled_by = PREV
				OR = {
					has_state_flag = state_culture_WHEAT_state_flag
					has_state_flag = state_culture_POTATO_state_flag
					has_state_flag = state_culture_COTTON_state_flag
				}
			}
			set_state_flag = state_culture_sowing_work_has_begun_state_flag
		}
	}
	else_if = {		### РИС + КУКУРУЗА
		limit = {
			meta_trigger = {
				text = {
					date > [YEAR].4.28
					date < [YEAR].5.2
				}
				YEAR = "[?global.year]"
			}
		}
		every_controlled_state = {
			limit = {
				is_fully_controlled_by = PREV
				OR = {
					has_state_flag = state_culture_RICE_state_flag
					has_state_flag = state_culture_CORN_state_flag
				}
			}
			set_state_flag = state_culture_sowing_work_has_begun_state_flag
		}
	}
}


OLD_calculate_provision_yearly_effect = {
	if = {
		limit							= { check_variable = { chance_of_crop_failure_var > 99 } }
		set_temp_variable				= { temp_random = 0 }
		else = {
			set_temp_variable			= { temp_random = 100 }
			subtract_from_temp_variable	= { temp_random = chance_of_crop_failure_var }
		}
	}
	random_list = {
		var:chance_of_crop_failure_var = {		# НЕУРОЖАЙ
			set_variable				= { chance_of_crop_failure_var = 15 }
			set_variable				= { yearly_income_provision_harvest_type_mult = 0.25 }
			set_country_flag			= { flag = crop_failure_flag days = 150 value = 1 }
		}
		temp_var:temp_random = {
			add_to_variable				= { chance_of_crop_failure_var = 33 }
			random_list = {
				10 = {
					set_variable		= { yearly_income_provision_harvest_type_mult = 1.25 }
					set_country_flag	= { flag = record_harvest_flag days = 150 value = 1 }
				}
				90 = {
					set_variable		= { yearly_income_provision_harvest_type_mult = 1 }
					set_country_flag	= { flag = normal_harvest_flag days = 150 value = 1  }
				}
			}
		}
	}
#	add_to_variable			= { provision_total_var = yearly_income_provision_harvest_type_mult }
#	clamp_variable			= { var = provision_total_var min = 0 max = max_provision_total_var }
}

test_1 = {
	SAI = {
		every_other_country = {
			calculate_provision_yearly_effect	= yes			# урожай культур
		}
	}
}

calculate_provision_yearly_effect = {
#	every_controlled_state = {
#		limit = {
#			is_fully_controlled_by = PREV
#			check_variable = { modifier@num_generation_provision_yearly > 0 }
#		}
#		set_temp_variable			= { PYtemp = 1 }
#		subtract_from_temp_variable	= { PYtemp = TOTAL_state_soil_depletion_var }
#		multiply_temp_variable		= { PYtemp = modifier@num_generation_provision_yearly }
#		multiply_temp_variable		= { PYtemp = TOTAL_state_fertility }
#		add_to_temp_variable		= { yearly_income_provision_temp = PYtemp }
#	}
#	
#	add_to_variable					= { provision_total_var = yearly_income_provision_temp }
#	clamp_variable					= { var = provision_total_var min = 0 max = max_provision_total_var }
#	log = "[GetDateText]: [This.GetName] ([This.GetTag]): yearly_income_provision_temp [?yearly_income_provision_temp]"
	
	
	
	
	if = {			### БОБОВЫЕ (80 %)
		limit = {
			meta_trigger = {
				text = {
					date > [YEAR].7.28
					date < [YEAR].8.2
				}
				YEAR = "[?global.year]"
			}
		}
		OLD_calculate_provision_yearly_effect = yes
		
		every_controlled_state = {
			limit = {
				is_fully_controlled_by = PREV
				has_state_flag = state_culture_LEGUMES_state_flag
			}
			clr_state_flag				= state_culture_sowing_work_has_begun_state_flag
			add_to_variable				= { TOTAL_soil_dirty = 0.01 }
			
			set_temp_variable			= { PYtemp_@PREV = 1 }
			subtract_from_temp_variable	= { PYtemp_@PREV = TOTAL_state_soil_depletion_var }
			multiply_temp_variable		= { PYtemp_@PREV = modifier@num_generation_provision_yearly }
			multiply_temp_variable		= { PYtemp_@PREV = TOTAL_state_fertility }
			multiply_temp_variable		= { PYtemp_@PREV = 0.80 }
			multiply_temp_variable		= { PYtemp_@PREV = PREV.yearly_income_provision_harvest_type_mult }
			add_to_temp_variable		= { yearly_income_provision_temp = PYtemp_@PREV }
			
			add_to_variable				= { TOTAL_state_soil_depletion_var = -0.05 }
			clamp_variable				= { var = TOTAL_state_soil_depletion_var min = 0 max = 1 }
			set_variable				= { GUI_state_soil_depletion_var = TOTAL_state_soil_depletion_var }
			multiply_variable			= { GUI_state_soil_depletion_var = 100 }
		}
		
		add_to_variable					= { provision_total_var = yearly_income_provision_temp }
		clamp_variable					= { var = provision_total_var min = 0 max = max_provision_total_var }
	}
	else_if = {		### ПШЕНИЦА (115 %) + КАРТОФЕЛЬ (100 %)
		limit = {
			meta_trigger = {
				text = {
					date > [YEAR].8.28
					date < [YEAR].9.2
				}
				YEAR = "[?global.year]"
			}
		}
		log = "==============================================================="
		set_variable = { provision_total_var = 0 }
		log = "[GetDateText]: [This.GetName] ([This.GetTag]): provision_total_var_1: [?provision_total_var]"
		every_controlled_state = {
			limit = {
				is_fully_controlled_by = PREV
				OR = {
					has_state_flag = state_culture_WHEAT_state_flag
					has_state_flag = state_culture_POTATO_state_flag
				}
			}
			clr_state_flag					= state_culture_sowing_work_has_begun_state_flag
			
			set_temp_variable				= { PYtemp = 1 }
			subtract_from_temp_variable		= { PYtemp = TOTAL_state_soil_depletion_var }
			multiply_temp_variable			= { PYtemp = modifier@num_generation_provision_yearly }
			multiply_temp_variable			= { PYtemp = TOTAL_state_fertility }
			if = {
				limit = { has_state_flag = state_culture_WHEAT_state_flag }
				multiply_temp_variable		= { PYtemp = 1.15 }
				add_to_variable				= { TOTAL_state_soil_depletion_var = 0.15 }
			}
			else = {
#				add_to_variable				= { TOTAL_state_soil_depletion_var = 0.08 }
			}
			clamp_variable					= { var = TOTAL_state_soil_depletion_var min = 0 max = 1 }
			set_variable					= { GUI_state_soil_depletion_var = TOTAL_state_soil_depletion_var }
			multiply_variable				= { GUI_state_soil_depletion_var = 100 }
			multiply_temp_variable			= { PYtemp = PREV.yearly_income_provision_harvest_type_mult }
			add_to_variable					= { PREV.yearly_income_provision_temp = PYtemp }
			
			add_to_variable					= { TOTAL_soil_dirty = 0.01 }
		}
		log = "[GetDateText]: [This.GetName] ([This.GetTag]): yearly_income_provision_temp: [?yearly_income_provision_temp]"
		add_to_variable						= { provision_total_var = yearly_income_provision_temp }
		clamp_variable						= { var = provision_total_var min = 0 max = max_provision_total_var }
		log = "[GetDateText]: [This.GetName] ([This.GetTag]): provision_total_var_2: [?provision_total_var]"
		clear_variable						= provision_total_var
	}
	else_if = {		### РИС (120 %) + КУКУРУЗА (140 %)
		limit = {
			meta_trigger = {
				text = {
					date > [YEAR].9.28
					date < [YEAR].10.2
				}
				YEAR = "[?global.year]"
			}
		}
		every_controlled_state = {
			limit = {
				is_fully_controlled_by = PREV
				OR = {
					has_state_flag = state_culture_RICE_state_flag
					has_state_flag = state_culture_CORN_state_flag
				}
			}
			clr_state_flag					= state_culture_sowing_work_has_begun_state_flag
			add_to_variable					= { TOTAL_soil_dirty = 0.01 }
			
			set_temp_variable				= { PYtemp = 1 }
			subtract_from_temp_variable		= { PYtemp = TOTAL_state_soil_depletion_var }
			multiply_temp_variable			= { PYtemp = modifier@num_generation_provision_yearly }
			multiply_temp_variable			= { PYtemp = TOTAL_state_fertility }
			if = {
				limit = {
					has_state_flag = state_culture_RICE_state_flag
				}
				multiply_temp_variable		= { PYtemp = 1.2 }
				add_to_variable				= { TOTAL_state_soil_depletion_var = 0.12 }
			}
			else_if = {
				limit = {
					has_state_flag = state_culture_CORN_state_flag
				}
				multiply_temp_variable		= { PYtemp = 1.4 }
				add_to_variable				= { TOTAL_state_soil_depletion_var = 0.18 }
			}
			clamp_variable					= { var = TOTAL_state_soil_depletion_var min = 0 max = 1 }
			set_variable					= { GUI_state_soil_depletion_var = TOTAL_state_soil_depletion_var }
			multiply_variable				= { GUI_state_soil_depletion_var = 100 }
			
			multiply_temp_variable			= { PYtemp = PREV.yearly_income_provision_harvest_type_mult }
			add_to_temp_variable			= { yearly_income_provision_temp = PYtemp }
		}
		add_to_variable						= { provision_total_var = yearly_income_provision_temp }
		clamp_variable						= { var = provision_total_var min = 0 max = max_provision_total_var }
	}
	else_if = {		### ХЛОПОК // (70 %)
		limit = {
			meta_trigger = {
				text = {
					date > [YEAR].10.28
					date < [YEAR].11.2
				}
				YEAR = "[?global.year]"
			}
		}
		every_controlled_state = {
			limit = {
				is_fully_controlled_by = PREV
				has_state_flag = state_culture_COTTON_state_flag
			}
			clr_state_flag					= state_culture_sowing_work_has_begun_state_flag
			add_to_variable					= { TOTAL_soil_dirty = 0.01 }
			
			set_temp_variable				= { PYtemp = 1 }
			subtract_from_temp_variable		= { PYtemp = TOTAL_state_soil_depletion_var }
			multiply_temp_variable			= { PYtemp = modifier@num_generation_provision_yearly }
			multiply_temp_variable			= { PYtemp = TOTAL_state_fertility }
			multiply_temp_variable			= { PYtemp = 0.70 }
			multiply_temp_variable			= { PYtemp = PREV.yearly_income_provision_harvest_type_mult }
			add_to_temp_variable			= { yearly_income_provision_temp = PYtemp }
			
			add_to_variable					= { TOTAL_state_soil_depletion_var = 0.10 }
			clamp_variable					= { var = TOTAL_state_soil_depletion_var min = 0 max = 1 }
			set_variable					= { GUI_state_soil_depletion_var = TOTAL_state_soil_depletion_var }
			multiply_variable				= { GUI_state_soil_depletion_var = 100 }
		}
#		add_to_variable						= { provision_total_var = yearly_income_provision_temp }
#		clamp_variable						= { var = provision_total_var min = 0 max = max_provision_total_var }
		
		### ТНП !!!
		
		
		every_state = {		# проверка на случай войн и прочих причин отсутствия полного контроля регионов
			limit = {
				has_state_flag = state_culture_sowing_work_has_begun_state_flag
			}
			clr_state_flag	= state_culture_sowing_work_has_begun_state_flag
			add_to_variable	= { TOTAL_soil_dirty = 0.01 }
		}
		clear_variable		= yearly_income_provision_harvest_type_mult
	}
}

calculate_provision_need_effect = {
	# ЗАТРАТЫ ПРОВИЗИИ
	set_temp_variable		= { provision_need_temp = max_manpower_k }
	multiply_temp_variable	= { provision_need_temp = provision_need_base_var }
	divide_temp_variable	= { provision_need_temp = 4800 }
	### БАФЫ
	set_temp_variable		= { consumption_of_provisions_temp = provision_need_temp }
	multiply_temp_variable	= { consumption_of_provisions_temp = modifier@consumption_of_provisions_modifier }
	add_to_temp_variable	= { provision_need_temp = consumption_of_provisions_temp }
	###
	set_variable			= { provision_need_var = provision_need_temp }	
}

calculate_hunger_dyn_effect = {
	if = {
		limit = {
			OR = {
				check_variable		= { var = provision_total_var	value = 0	compare = less_than_or_equals }
				check_variable		= { var = provision_days_var	value = 7	compare = less_than_or_equals }
			}
		}
		set_variable				= { hunger_stability_weekly_var = -0.005 }
		set_variable				= { hunger_monthly_population_var = -1 }
		if = {
			limit					= { NOT = { has_variable = hunger_dyn_var } }
			set_variable			= { hunger_dyn_var = 1 }
			else = {
				add_to_variable		= { hunger_dyn_var = 1 }
				clamp_variable		= { var = hunger_dyn_var min = 0 max = 10 }
				set_variable		= { hunger_change_population_weekly_var = -0.001 }
				multiply_variable	= { hunger_change_population_weekly_var = hunger_dyn_var }
				set_variable		= { hunger_industrial_capacity_var = -0.025 }
				multiply_variable	= { hunger_industrial_capacity_var = hunger_dyn_var }
				set_variable		= { hunger_production_factory_efficiency_gain_factor_var = -0.05 }
				multiply_variable	= { hunger_production_factory_efficiency_gain_factor_var = hunger_dyn_var }
				set_variable		= { hunger_production_speed_buildings_factor_var = -0.035 }
				multiply_variable	= { hunger_production_speed_buildings_factor_var = hunger_dyn_var }
				set_variable		= { hunger_research_speed_factor_var = -0.04 }
				multiply_variable	= { hunger_research_speed_factor_var = hunger_dyn_var }
			}
		}
		if = {
			limit					= { NOT = { has_dynamic_modifier = { modifier = hunger_dyn } } }
			add_dynamic_modifier	= { modifier = hunger_dyn }
		}
	}
	else = {
		add_to_variable		= { hunger_dyn_var = -1 }
		clamp_variable		= { var = hunger_dyn_var min = 0 max = 10 }
		set_variable		= { hunger_change_population_weekly_var = -0.001 }
		multiply_variable	= { hunger_change_population_weekly_var = hunger_dyn_var }
		set_variable		= { hunger_industrial_capacity_var = -0.025 }
		multiply_variable	= { hunger_industrial_capacity_var = hunger_dyn_var }
		set_variable		= { hunger_production_factory_efficiency_gain_factor_var = -0.05 }
		multiply_variable	= { hunger_production_factory_efficiency_gain_factor_var = hunger_dyn_var }
		set_variable		= { hunger_production_speed_buildings_factor_var = -0.035 }
		multiply_variable	= { hunger_production_speed_buildings_factor_var = hunger_dyn_var }
		set_variable		= { hunger_research_speed_factor_var = -0.04 }
		multiply_variable	= { hunger_research_speed_factor_var = hunger_dyn_var }
		if = {
			limit			= { check_variable = { var = hunger_dyn_var	value = 0 compare = equals } }
			clear_variable	= hunger_dyn_var
			clear_variable	= hunger_stability_weekly_var
			clear_variable	= hunger_monthly_population_var
		}
	}
}

calculate_change_population_weekly_effect = {
	if = {
		limit						= { check_variable = { var = modifier@num_change_population_weekly	value = 0 compare = not_equals } }
		every_controlled_state = {
			set_temp_variable		= { state_hunger_change_population_temp = state_population_k }
			multiply_temp_variable	= { state_hunger_change_population_temp = PREV.modifier@num_change_population_weekly }
			multiply_temp_variable	= { state_hunger_change_population_temp = 1000 }
			round_temp_variable		= state_hunger_change_population_temp
			add_manpower			= var:state_hunger_change_population_temp
			
			add_to_temp_variable	= { ecs_population = state_hunger_change_population_temp }
		}
		divide_temp_variable		= { ecs_population = 1000 }
		
		set_variable				= { hunger_change_population_total_var = ecs_population }								# для текста
		divide_temp_variable		= { ecs_population = num_controlled_states }
		multiply_temp_variable		= { ecs_population = 1000 }
		round_temp_variable			= ecs_population
		set_variable				= { hunger_change_population_per_state_var = ecs_population }							# для текста
	}
}

#calculate_change_population_weekly_old_effect = {	# здесь некоторые регионы становились безлюдными т.к. не учитывалась неравномерность их заселения
#	if = {
#		limit					= { check_variable = { var = modifier@num_change_population_weekly	value = 0 compare = not_equals } }
#		set_temp_variable		= { hunger_change_population_temp = max_manpower_k }
#		multiply_temp_variable	= { hunger_change_population_temp = modifier@num_change_population_weekly }
#		set_variable			= { hunger_change_population_total_var = hunger_change_population_temp }				# для текста
#		round_variable			= hunger_change_population_total_var													# для текста
#		divide_temp_variable	= { hunger_change_population_temp = num_controlled_states }
#		multiply_temp_variable	= { hunger_change_population_temp = 1000 }
#		round_temp_variable		= hunger_change_population_temp
#		set_variable			= { hunger_change_population_per_state_var = hunger_change_population_temp }			# для текста
#		every_controlled_state	= {
#			add_manpower		= var:hunger_change_population_temp
#		}
#	}
#}


calculate_steel_mill_effect = {
	if = {
		limit = {
			check_variable = { var = resource@iron		value = 0	compare = less_than }
			check_variable = { var = steel_mill_total	value = 0	compare = greater_than }
		}
		set_temp_variable			= { steel_temp = resource@iron }
		divide_temp_variable		= { steel_temp = -8 }
		set_temp_variable			= { steel_temp2 = steel_temp }	# десятичное
		round_temp_variable			= steel_temp					# целое
		subtract_from_temp_variable	= { steel_temp2 = steel_temp }
		if = {
			limit					= { check_variable = { var = steel_temp2	value = 0	compare = greater_than } }
			add_to_temp_variable	= { steel_temp = 1 }
		}
#		multiply_temp_variable		= { steel_temp = -1 }
		set_temp_variable			= { steel_mill_minus_temp = steel_temp }									# (+ число)
		every_controlled_state = {
			add_to_temp_variable	= { ecs_temp = num_of_deactivated_mill_var }
		}
		set_variable				= { steel_minus_var = ecs_temp }												# сколько уже отрублено сталелитеек (+ число)
		log = "[GetDateText]: [This.GetName] ([This.GetTag]): steel_minus_var [?steel_minus_var]			// TOTAL DEACTIVATED STEEL MILL"
		log = "[GetDateText]: [This.GetName] ([This.GetTag]): steel_mill_minus_temp [?steel_mill_minus_temp]	// TOTAL NEED DEACTIVATED STEEL MILL"
		
		if = {			# сталелитейни надо включать
			limit				= { check_variable = { var = steel_minus_var	value = steel_mill_minus_temp	compare = greater_than } }
			every_controlled_state = {
				limit			= { has_variable = steel_minus_state_var }
				clear_variable	= steel_minus_state_var
				clear_variable	= num_of_deactivated_mill_var
			}
			set_variable		= { steel_minus_var = 0 }													# сколько уже отрублено сталелитеек (+ число)
			log = "[GetDateText]: [This.GetName] ([This.GetTag]): // DROP steel_minus_var"
		}
		else_if = {		# сталелитейни надо отключать
			limit				= { check_variable = { var = steel_minus_var	value = steel_mill_minus_temp	compare = less_than } }
			set_variable		= { steel_minus_temp = steel_mill_minus_temp }								# число сталелитеек, которые необходимо отключить (+ число)
			if = {
				limit			= { check_variable = { var = steel_minus_temp	value = 0	compare = not_equals } }
				log = "[GetDateText]: [This.GetName] ([This.GetTag]): steel_minus_temp [?steel_minus_temp] // START while_loop_effect"
				while_loop_effect = {
					limit							= { check_variable = { var = steel_minus_temp	value = 0	compare = greater_than } }
					random_controlled_state = {
						limit	= {
							steel_mill > 0
							check_variable			= { var = num_of_deactivated_mill_var	value = building_level@steel_mill	compare = less_than }
						}
						if = {
							limit					= { check_variable = { var = ROOT.steel_minus_temp	value = building_level@steel_mill	compare = greater_than_or_equals } }
							subtract_from_variable	= { ROOT.steel_minus_temp = building_level@steel_mill }
							add_to_variable			= { num_of_deactivated_mill_var = building_level@steel_mill }
							set_temp_variable		= { st1 = THIS.resource@steel }
							set_variable			= { steel_minus_state_var = st1 }
							log = "[GetDateText]: [This.GetName] ([This.GetTag]): steel_minus_temp [?ROOT.steel_minus_temp] GREATER_THAN_OR_EQUALS building_level@steel_mill [?building_level@steel_mill] // steel_minus_state_var: [?steel_minus_state_var]"
							
							else = {
								set_temp_variable			= { st1 = building_level@steel_mill }	
								subtract_from_temp_variable	= { st1 = ROOT.steel_minus_temp }
								subtract_from_temp_variable	= { st1 = building_level@steel_mill }
								multiply_temp_variable		= { st1 = -1 }								# (+ число)
								subtract_from_variable		= { ROOT.steel_minus_temp = st1 }
								add_to_variable				= { num_of_deactivated_mill_var = st1 }
								
								multiply_temp_variable		= { st1 = 4 }								# (+ число)
								set_variable				= { steel_minus_state_var = st1 }
								log = "[GetDateText]: [This.GetName] ([This.GetTag]): steel_minus_temp [?ROOT.steel_minus_temp] LESS_THAN building_level@steel_mill [?building_level@steel_mill] // steel_minus_state_var: [?steel_minus_state_var]"
							}
						}
						if = {
							limit					= { NOT = { has_dynamic_modifier = { modifier = steel_mill_minus_state_dyn } } }
							add_dynamic_modifier	= { modifier = steel_mill_minus_state_dyn }
						}
					}
				}
			}
		}
		set_variable				= { steel_mill_ok = steel_mill }
		subtract_from_variable		= { steel_mill_ok = steel_mill_minus_temp }
		set_variable				= { steel_return_electric_power_var = steel_mill_minus_temp }
		multiply_variable			= { steel_return_electric_power_var = -3.5 }
		
		if = {
			limit					= { NOT = { has_dynamic_modifier = { modifier = steel_mill_minus_dyn } } }
			add_dynamic_modifier	= { modifier = steel_mill_minus_dyn }
		}
	}
}

calculate_proletariat_start_effect = {
	calculate_in_economic_development_factor	= yes
	calculate_ACTUAL_proletariat_factor_effect	= yes
	
	set_temp_variable		= { TOTAL_num_proletariat_goal_k_temp = max_manpower_k }
	multiply_temp_variable	= { TOTAL_num_proletariat_goal_k_temp = ACTUAL_proletariat_factor_var }
	set_variable			= { TOTAL_num_ALL_proletariat_k = TOTAL_num_proletariat_goal_k_temp }
	set_variable			= { TOTAL_num_USE_proletariat_k = modifier@num_proletariat_k }
	add_to_variable			= { TOTAL_num_USE_proletariat_k = modifier@num_proletariat_private_k }
	add_to_temp_variable	= { TOTAL_num_proletariat_goal_k_temp = TOTAL_num_USE_proletariat_k }
	
	set_variable			= { TOTAL_num_USE_proletariat_k_pozitiv = modifier@num_proletariat_k }
	add_to_variable			= { TOTAL_num_USE_proletariat_k_pozitiv = modifier@num_proletariat_private_k }
	multiply_variable		= { TOTAL_num_USE_proletariat_k_pozitiv = -1 }
	
#	multiply_temp_variable	= { TOTAL_num_proletariat_goal_k_temp = interest_in_economic_development_base }
	
	set_variable			= { TOTAL_num_proletariat	= TOTAL_num_proletariat_goal_k_temp }
	multiply_variable		= { TOTAL_num_proletariat	= 1000 }
	set_variable			= { TOTAL_num_proletariat_k	= TOTAL_num_proletariat_goal_k_temp }
	set_variable			= { TOTAL_num_proletariat_m	= TOTAL_num_proletariat_goal_k_temp }
	divide_variable			= { TOTAL_num_proletariat_m	= 1000 }
	
	# Сколько есть/должно быть от calculate_ACTUAL_proletariat_factor_effect
	set_variable			= { TOTAL_num_ALL_proletariat	= TOTAL_num_ALL_proletariat_k }
	multiply_variable		= { TOTAL_num_ALL_proletariat	= 1000 }
	set_variable			= { TOTAL_num_ALL_proletariat_m	= TOTAL_num_ALL_proletariat_k }
	divide_variable			= { TOTAL_num_ALL_proletariat_m	= 1000 }
	
	# Сколько есть от modifier@num_proletariat_k и modifier@num_proletariat_private_k
	set_variable			= { TOTAL_num_USE_proletariat_pozitiv	= TOTAL_num_USE_proletariat_k_pozitiv }
	multiply_variable		= { TOTAL_num_USE_proletariat_pozitiv	= 1000 }
	set_variable			= { TOTAL_num_USE_proletariat_m_pozitiv	= TOTAL_num_USE_proletariat_k_pozitiv }
	divide_variable			= { TOTAL_num_USE_proletariat_m_pozitiv	= 1000 }
	
	# Фикс max_manpower_k
	set_variable			= { max_manpower_var	= max_manpower_k }
	multiply_variable		= { max_manpower_var	= 1000 }
	set_variable			= { max_manpower_m_var	= max_manpower_k }
	divide_variable			= { max_manpower_m_var	= 1000 }
	
	
	set_temp_variable		= { t1 = TOTAL_num_proletariat_k }
	add_to_temp_variable	= { t1 = TOTAL_num_USE_proletariat_k_pozitiv }
	divide_temp_variable	= { t1 = max_manpower_k }
	set_variable			= { current_proletariat_percent_var = t1 }
	
	set_variable			= { proletariat_unemployment_rate = TOTAL_num_USE_proletariat_k_pozitiv }
	divide_variable			= { proletariat_unemployment_rate = TOTAL_num_ALL_proletariat_k }
	clamp_variable			= { var = proletariat_unemployment_rate	min = 0	max = 1 }
}

calculate_ACTUAL_proletariat_factor_effect = {
	set_temp_variable		= { proletariat_factor_temp = modifier@proletariat_factor }
	multiply_temp_variable	= { proletariat_factor_temp = interest_in_economic_development_base }
	set_variable			= { ACTUAL_proletariat_factor_var = proletariat_factor_temp }				# Целевой % пролов при перемноженных факторах
}

calculate_proletariat_effect = {
	set_temp_variable		= { TOTAL_num_proletariat_goal_k_temp = max_manpower_k }
	multiply_temp_variable	= { TOTAL_num_proletariat_goal_k_temp = ACTUAL_proletariat_factor_var }
	set_variable			= { TOTAL_num_ALL_proletariat_k = TOTAL_num_proletariat_goal_k_temp }
	set_variable			= { TOTAL_num_USE_proletariat_k = modifier@num_proletariat_k }
	add_to_variable			= { TOTAL_num_USE_proletariat_k = modifier@num_proletariat_private_k }
	add_to_temp_variable	= { TOTAL_num_proletariat_goal_k_temp = TOTAL_num_USE_proletariat_k }
	
	set_variable			= { TOTAL_num_USE_proletariat_k_pozitiv = modifier@num_proletariat_k }
	add_to_variable			= { TOTAL_num_USE_proletariat_k_pozitiv = modifier@num_proletariat_private_k }
	multiply_variable		= { TOTAL_num_USE_proletariat_k_pozitiv = -1 }
	
	set_temp_variable		= { TOTAL_num_proletariat_k_temp = TOTAL_num_proletariat_k }
	
	calculate_ACTUAL_proletariat_factor_effect		= yes
	calculate_mobilization_speed_proletariat_effect	= yes
	
	set_variable			= { TOTAL_num_proletariat	= TOTAL_num_proletariat_k_temp }
	multiply_variable		= { TOTAL_num_proletariat	= 1000 }
	set_variable			= { TOTAL_num_proletariat_k	= TOTAL_num_proletariat_k_temp }
	set_variable			= { TOTAL_num_proletariat_m	= TOTAL_num_proletariat_k_temp }
	divide_variable			= { TOTAL_num_proletariat_m	= 1000 }
	
	# Сколько есть/должно быть от calculate_ACTUAL_proletariat_factor_effect
	set_variable			= { TOTAL_num_ALL_proletariat	= TOTAL_num_ALL_proletariat_k }
	multiply_variable		= { TOTAL_num_ALL_proletariat	= 1000 }
	set_variable			= { TOTAL_num_ALL_proletariat_m	= TOTAL_num_ALL_proletariat_k }
	divide_variable			= { TOTAL_num_ALL_proletariat_m	= 1000 }
	
	# Сколько есть от modifier@num_proletariat_k и modifier@num_proletariat_private_k
	set_variable			= { TOTAL_num_USE_proletariat_pozitiv	= TOTAL_num_USE_proletariat_k_pozitiv }
	multiply_variable		= { TOTAL_num_USE_proletariat_pozitiv	= 1000 }
	set_variable			= { TOTAL_num_USE_proletariat_m_pozitiv	= TOTAL_num_USE_proletariat_k_pozitiv }
	divide_variable			= { TOTAL_num_USE_proletariat_m_pozitiv	= 1000 }
	
	# Фикс max_manpower_k
	set_variable			= { max_manpower_var	= max_manpower_k }
	multiply_variable		= { max_manpower_var	= 1000 }
	set_variable			= { max_manpower_m_var	= max_manpower_k }
	divide_variable			= { max_manpower_m_var	= 1000 }
	
	set_temp_variable		= { t1 = TOTAL_num_proletariat_k }
	add_to_temp_variable	= { t1 = TOTAL_num_USE_proletariat_k_pozitiv }
	divide_temp_variable	= { t1 = max_manpower_k }
	
	# учет заинтересованности в развитии
#	multiply_temp_variable	= { t1 = interest_in_economic_development_base }
	
	set_variable			= { current_proletariat_percent_var = t1 }
	
	set_variable			= { proletariat_unemployment_rate = TOTAL_num_USE_proletariat_k_pozitiv }
	divide_variable			= { proletariat_unemployment_rate = TOTAL_num_ALL_proletariat_k }
	clamp_variable			= { var = proletariat_unemployment_rate	min = 0	max = 1 }
}

calculate_mobilization_speed_proletariat_effect = {
	if = {
		limit = {
#			check_variable			= { var = TOTAL_num_proletariat_goal_k_temp	value = TOTAL_num_proletariat_k	compare = not_equals }
#			check_variable			= { var = current_proletariat_percent_var	value = modifier@proletariat_factor	compare = not_equals }
			check_variable			= { var = current_proletariat_percent_var	value = ACTUAL_proletariat_factor_var	compare = not_equals }
		}
		set_temp_variable			= { mobilization_speed_proletariat_temp = 0.01 }
		multiply_temp_variable		= { mobilization_speed_proletariat_temp = modifier@mobilization_speed_proletariat }
		add_to_temp_variable		= { mobilization_speed_proletariat_temp = 0.01 }											# итоговое значение ежедневного прироста пролов в %
		set_variable				= { mobilization_speed_proletariat_var = mobilization_speed_proletariat_temp }
		
		calculate_in_economic_development_factor	= yes
		# определение дельты законов в %
		set_temp_variable			= { target_proletariat_percent = modifier@proletariat_factor }
		set_temp_variable			= { ex_proletariat_percent = TOTAL_num_proletariat_k }
		divide_temp_variable		= { ex_proletariat_percent = max_manpower_k }
		subtract_from_temp_variable = { target_proletariat_percent = ex_proletariat_percent }
			# учет заинтересованности в развитии
		multiply_temp_variable		= { target_proletariat_percent = interest_in_economic_development_base }
	
		set_variable				= { target_proletariat_percent_var = target_proletariat_percent }
		
		# число дней
		set_temp_variable			= { num_of_days_mobilization_proletariat_temp = target_proletariat_percent }
		multiply_temp_variable		= { num_of_days_mobilization_proletariat_temp = 100 }
		divide_temp_variable		= { num_of_days_mobilization_proletariat_temp = mobilization_speed_proletariat_temp }
		if = {
			limit					= { check_variable = { num_of_days_mobilization_proletariat_temp < 0 } }
			multiply_temp_variable	= { num_of_days_mobilization_proletariat_temp = -1 }											# для текст
		}
		set_variable				= { num_of_days_mobilization_proletariat = num_of_days_mobilization_proletariat_temp }
		
		# количество пролов
		set_temp_variable			= { target_delta_proletariat_temp = target_proletariat_percent }
		multiply_temp_variable		= { target_delta_proletariat_temp = max_manpower_k }
		add_to_temp_variable		= { target_delta_proletariat_temp = TOTAL_num_USE_proletariat_k }						# итоговое значение ДЕЛЬТЫ пролов в чел.
		set_variable				= { target_proletariat = target_delta_proletariat_temp }
		
		set_temp_variable			= { target_min_pulse_proletariat_temp = target_delta_proletariat_temp }
		multiply_temp_variable		= { target_min_pulse_proletariat_temp = 0.01 }												# минимальное количество пролов для срабатывания эффекта
		set_variable				= { target_min_pulse_proletariat = target_min_pulse_proletariat_temp }
		
		set_temp_variable			= { TOTAL_num_proletariat_add_k_temp = target_delta_proletariat_temp }
		divide_temp_variable		= { TOTAL_num_proletariat_add_k_temp = num_of_days_mobilization_proletariat_temp }			# число прироста пролов в день
		set_variable				= { TOTAL_num_proletariat_add_k = TOTAL_num_proletariat_add_k_temp }
		
		# проверка накопления пролов до минимального количества
		add_to_variable				= { SUM_check_min_pulse_proletariat = TOTAL_num_proletariat_add_k_temp }
		if = {
			limit = {
				OR = {
					AND = {
						check_variable	= { target_min_pulse_proletariat_temp < 0 }
						check_variable	= { var = SUM_check_min_pulse_proletariat	value = target_min_pulse_proletariat_temp	compare = less_than_or_equals }
					}
					AND = {
						check_variable	= { target_min_pulse_proletariat_temp > 0 }
						check_variable	= { var = SUM_check_min_pulse_proletariat	value = target_min_pulse_proletariat_temp	compare = greater_than_or_equals }
					}
				}
			}
			add_to_temp_variable		= { TOTAL_num_proletariat_k_temp = SUM_check_min_pulse_proletariat }
			clear_variable				= SUM_check_min_pulse_proletariat
		}
		
		if = {
			limit						= { check_variable = { target_proletariat < 0 } }
			multiply_variable			= { mobilization_speed_proletariat_var = -1 }												# для текст
		}
		clamp_variable					= { var = mobilization_speed_proletariat_var	min = 0.0001	max = 2 }
	}
}

calculate_in_economic_development_factor = {
	set_temp_variable					= { interest_in_economic_development_base_temp = 1 }
	set_temp_variable					= { t1 = num_of_factories }
	set_temp_variable					= { t2 = t1 }
	add_to_temp_variable				= { t2 = global.nof }	# ~100
	divide_temp_variable				= { t1 = t2 }
	subtract_from_temp_variable			= { interest_in_economic_development_base_temp = t1 }
	add_to_temp_variable				= { interest_in_economic_development_base_temp = modifier@interest_in_economic_development_factor }
	set_variable						= { interest_in_economic_development_base = interest_in_economic_development_base_temp }
	clamp_variable						= { var = interest_in_economic_development_base	min = 0	max = 2 }
}

effect_calculate_base_nof = {
	every_other_country = {
		add_to_temp_variable			= { nof_temp = num_of_factories }
	}
	multiply_temp_variable				= { nof_temp = 0.5 }
	round_temp_variable					= nof_temp
	set_variable						= { global.nof = nof_temp }
}

calculate_science_start_effect = {
	set_temp_variable					= { num_science_minus_temp = amount_research_slots }
	multiply_temp_variable				= { num_science_minus_temp = -1 }
	set_variable						= { num_science_minus_var = num_science_minus_temp }
	if = {
		limit							= { check_variable	= { var = modifier@num_use_science_point_factor	value = 0 compare = not_equals } }
		set_temp_variable				= { num_science_minus_factor_temp = 1 }
		add_to_temp_variable			= { num_science_minus_factor_temp = modifier@num_use_science_point_factor }
		multiply_variable				= { num_science_minus_var = num_science_minus_factor_temp }
	}
	set_temp_variable					= { num_science_plus_temp = modifier@num_generation_science_point }
	set_variable						= { num_science_plus_var = num_science_plus_temp }
	set_variable						= { num_science_DELTA_var = num_science_minus_var }
	add_to_variable						= { num_science_DELTA_var = num_science_plus_var }
}

calculate_science_effect = {
	set_variable						= { num_science_DIRTY_var = TOTAL_num_science }
	
	set_temp_variable					= { num_science_minus_temp = amount_research_slots }
	multiply_temp_variable				= { num_science_minus_temp = -1 }
	if = {
		limit							= { check_variable	= { var = modifier@num_use_science_point_factor	value = 0 compare = not_equals } }
		set_temp_variable				= { num_science_minus_factor_temp = 1 }
		add_to_temp_variable			= { num_science_minus_factor_temp = modifier@num_use_science_point_factor }
		multiply_temp_variable			= { num_science_minus_temp = num_science_minus_factor_temp }
	}
	set_variable						= { num_science_minus_var = num_science_minus_temp }
	
	set_temp_variable					= { num_science_plus_temp = modifier@num_generation_science_point }
	set_variable						= { num_science_plus_var = num_science_plus_temp }
	set_variable						= { num_science_DELTA_var = num_science_minus_var }
	add_to_variable						= { num_science_DELTA_var = num_science_plus_var }
	
	add_to_variable						= { TOTAL_num_science = num_science_DELTA_var }
	clamp_variable						= { var = TOTAL_num_science	min = 0 }
	
	if = {
		limit							= { check_variable	= { num_science_DIRTY_var = TOTAL_num_science } }
		add_to_variable					= { num_science_DIRTY_var = 0.1 }
	}
}

set_fertility_in_ALL_state_effect = {
	every_state = {
		limit = {
			OR = {
				state = 2 state = 4 state = 13 state = 12 state = 9 state = 10 state = 11	# SCO
				state = 25 state = 26 state = 27 state = 28 state = 29						# SEM
				state = 56 state = 57 state = 37 state = 38									# OBR
			}
		}
		set_variable_to_random	= { var = TOTAL_state_fertility		min = 0.0	max = 0.05 }
		add_dynamic_modifier	= { modifier = arctic_soil_type_dynamic_modifier }
	}
	every_state = {
		limit = {
			OR = {
				state = 39 state = 40 state = 50 state = 48		# OBR
				state = 30 state = 35							# SEM
				state = 3										# SKO
				state = 159										# ARS
				state = 100										# IMP
				state = 85 state = 87 state = 89				# KOL
				state = 68 state = 66 state = 63				# ANT
			}
		}
		set_variable_to_random	= { var = TOTAL_state_fertility		min = 0.05	max = 0.25 }
		add_dynamic_modifier	= { modifier = peat_soil_type_dynamic_modifier }
	}
	every_state = {
		limit = {
			OR = {
				state = 17 state = 18 state = 19 state = 23								# SCO
				state = 163 state = 162 state = 153 state = 151 state = 150 state = 161	# ARS
				state = 101																# IMP
				state = 128 state = 122 state = 134										# UNF
				state = 136 state = 135 state = 137	state = 139 state = 140				# UNF
				state = 69																# ANT
				state = 46 state = 54													# OBR
				state = 95																# KOL
			}
		}
		set_variable_to_random	= { var = TOTAL_state_fertility		min = 0.25	max = 0.50 }
		add_dynamic_modifier	= { modifier = gray_earth_soil_type_dynamic_modifier }
	}
	every_state = {
		limit = {
			OR = {
				state = 158 state = 71 state = 72 state = 64 state = 74
				state = 133 state = 127 state = 170 state = 102
				state = 96 state = 144 state = 154 state = 91 state = 93
				state = 171 state = 172 state = 155 state = 51 state = 148 state = 147
			}
		}
		set_variable_to_random	= { var = TOTAL_state_fertility		min = 0.35	max = 0.60 }
		add_dynamic_modifier	= { modifier = brown_soil_type_dynamic_modifier }
	}
	every_state = {
		limit = {
			OR = {
				state = 146 state = 160 state = 145 state = 149 state = 165 state = 164 state = 167 state = 168
				state = 106 state = 107 state = 104
				state = 79 state = 78 state = 73
				state = 125 state = 124 state = 123
				state = 86 state = 152
			}
		}
		set_variable_to_random	= { var = TOTAL_state_fertility		min = 0.40	max = 0.65 }
		add_dynamic_modifier	= { modifier = chestnut_soil_type_dynamic_modifier }
	}
	every_state = {
		limit = {
			OR = {
				state = 166 state = 90
				state = 88 state = 80
				state = 105 state = 81 state = 77
				state = 130 state = 169
			}
		}
		set_variable_to_random	= { var = TOTAL_state_fertility		min = 0.90	max = 1.0 }
		add_dynamic_modifier	= { modifier = chernozem_soil_type_dynamic_modifier }
	}
	every_state = {
		limit = {
			OR = {
				state = 109 state = 110 state = 111 state = 112
				state = 108 state = 99 state = 98 state = 103
			}
		}
		set_variable_to_random	= { var = TOTAL_state_fertility		min = 0.50	max = 0.60 }
		add_dynamic_modifier	= { modifier = red_earth_soil_type_dynamic_modifier }
	}
	every_state = {
		limit = {
			OR = {
				state = 82 state = 84 state = 97
			}
		}
		set_variable_to_random	= { var = TOTAL_state_fertility		min = 0.05	max = 0.10 }
		add_dynamic_modifier	= { modifier = desert_soil_type_dynamic_modifier }
	}
	every_state = {
		limit = {
			OR = {
				state = 83 state = 70 state = 65 state = 75 state = 67
				state = 76 state = 132 state = 131 state = 129 state = 126
			}
		}
		set_variable_to_random	= { var = TOTAL_state_fertility		min = 0.75	max = 0.90 }
		add_dynamic_modifier	= { modifier = alluvial_soil_type_dynamic_modifier }
	}
	every_state = {
		limit = {
			NOT = {
				has_dynamic_modifier = { modifier = arctic_soil_type_dynamic_modifier }
				has_dynamic_modifier = { modifier = peat_soil_type_dynamic_modifier }
				has_dynamic_modifier = { modifier = podzolic_soil_type_dynamic_modifier }
				has_dynamic_modifier = { modifier = gray_earth_soil_type_dynamic_modifier }
				has_dynamic_modifier = { modifier = brown_soil_type_dynamic_modifier }
				has_dynamic_modifier = { modifier = chestnut_soil_type_dynamic_modifier }
				has_dynamic_modifier = { modifier = chernozem_soil_type_dynamic_modifier }
				has_dynamic_modifier = { modifier = red_earth_soil_type_dynamic_modifier }
				has_dynamic_modifier = { modifier = desert_soil_type_dynamic_modifier }
				has_dynamic_modifier = { modifier = alluvial_soil_type_dynamic_modifier }
			}
		}
		set_variable_to_random	= { var = TOTAL_state_fertility		min = 0.10	max = 0.20 }
		add_dynamic_modifier	= { modifier = podzolic_soil_type_dynamic_modifier }
	}


### КУЛЬТУРЫ
	clear_array = global.wheat_states_array
	clear_array = global.rice_states_array
	clear_array = global.cotton_states_array
	clear_array = global.corn_states_array
	
	every_state = {
		limit = {
			NOT = {
				has_dynamic_modifier = { modifier = arctic_soil_type_dynamic_modifier }
				has_dynamic_modifier = { modifier = red_earth_soil_type_dynamic_modifier }
				has_dynamic_modifier = { modifier = desert_soil_type_dynamic_modifier }
				state = 145
			}
		}
		set_state_flag = state_culture_WHEAT_available_state_flag
		add_to_array = { global.wheat_states_array = This.id }
	}
	every_state = {
		limit = {
			OR = {
				has_dynamic_modifier = { modifier = red_earth_soil_type_dynamic_modifier }
				state = 145 state = 149 state = 83
				state = 102 state = 106 state = 107 state = 79 state = 78 state = 73
				state = 77 state = 80 state = 105 state = 131 state = 123 state = 124 state = 125 state = 130
				state = 104 state = 129 state = 128 state = 129 state = 127 state = 129 state = 126
			}
		}
		set_state_flag = state_culture_RICE_available_state_flag
		add_to_array = { global.rice_states_array = This.id }
	}
	every_state = {
		limit = {
			OR = {
				has_state_flag = state_culture_RICE_available_state_flag
				state = 97 state = 100 state = 101 state = 132 state = 133
				state = 74 state = 63 state = 64 state = 81
				state = 87 state = 85 state = 84 state = 82 state = 86
				state = 152 state = 153 state = 151 state = 170 state = 150 state = 169 state = 166 state = 162
			}
		}
		set_state_flag = state_culture_COTTON_available_state_flag
		add_to_array = { global.cotton_states_array = This.id }
	}
	every_state = {
		limit = {
			OR = {
				has_dynamic_modifier = { modifier = chestnut_soil_type_dynamic_modifier }
				has_dynamic_modifier = { modifier = chernozem_soil_type_dynamic_modifier }
				has_dynamic_modifier = { modifier = alluvial_soil_type_dynamic_modifier }
				state = 103
			}
		}
		set_state_flag = state_culture_CORN_available_state_flag
		add_to_array = { global.corn_states_array = This.id }
	}	
	
	
	
	
	
	force_update_map_mode = {
		limit = { is_ai = no }
		mapmode = soil_type_map_mode
	}
	
	every_state = {
		limit = { is_capital = no }
#		set_variable_to_random	= { var = TOTAL_state_fertility				min = 0.3	max = 0.8 }
		set_variable_to_random	= { var = TOTAL_state_soil_depletion_var	min = 0.1	max = 0.4 }
		set_variable			= { GUI_state_soil_depletion_var = TOTAL_state_soil_depletion_var }
		multiply_variable		= { GUI_state_soil_depletion_var = 100 }								# для ГУИ
		set_variable			= { TOTAL_soil_dirty = TOTAL_state_fertility }
	}
	every_state = {
		limit = { is_capital = yes }
#		set_variable_to_random	= { var = TOTAL_state_fertility				min = 0.7	max = 1 }
		set_variable_to_random	= { var = TOTAL_state_soil_depletion_var	min = 0.0	max = 0.3 }
		set_variable			= { GUI_state_soil_depletion_var = TOTAL_state_soil_depletion_var }
		multiply_variable		= { GUI_state_soil_depletion_var = 100 }								# для ГУИ
		set_variable			= { TOTAL_soil_dirty = TOTAL_state_fertility }
	}
}

drop_all_state_culture_flags = {
	clr_state_flag = state_culture_POTATO_state_flag
	clr_state_flag = state_culture_WHEAT_state_flag
	clr_state_flag = state_culture_RICE_state_flag
	clr_state_flag = state_culture_LEGUMES_state_flag
	clr_state_flag = state_culture_COTTON_state_flag
	clr_state_flag = state_culture_CORN_state_flag
}


calculate_civ_production_prod_speed_effect = {
	set_temp_variable		= { civ_factory_base_speed_temp = civ_factories_ui_array_last_var_@token:civ_production_consumer_goods }
	add_to_temp_variable	= { civ_factory_base_speed_temp = num_of_factories_cgff_var }		# только у civ_production_consumer_goods
	multiply_temp_variable	= { civ_factory_base_speed_temp = 5 }
	divide_temp_variable	= { civ_factory_base_speed_temp = global.civ_factories_production_cost_@token:civ_production_consumer_goods }
	set_variable			= { civ_factory_total_speed_@token:civ_production_consumer_goods = civ_factory_base_speed_temp }									# скорость производства снаряги
	
	set_temp_variable		= { civ_current_efficiency_temp = civ_current_efficiency_@token:civ_production_consumer_goods }										# бонус от эффективности
	divide_temp_variable	= { civ_current_efficiency_temp = 100 }
	multiply_variable		= { civ_factory_total_speed_@token:civ_production_consumer_goods = civ_current_efficiency_temp }
	
	add_to_variable			= { civ_factory_counter_production_@token:civ_production_consumer_goods = civ_factory_total_speed_@token:civ_production_consumer_goods }		# с десятыми долями
	set_temp_variable		= { civ_factory_num_production_@token:civ_production_consumer_goods = civ_factory_counter_production_@token:civ_production_consumer_goods }
	if = {
		limit = { check_variable = { var = civ_factory_num_production_@token:civ_production_consumer_goods value = 1 compare = greater_than_or_equals } }		# если производство больше 1 шт\день
		round_temp_variable			= civ_factory_num_production_@token:civ_production_consumer_goods
		add_equipment_to_stockpile	= { type = civ_production_consumer_goods amount = civ_factory_num_production_@token:civ_production_consumer_goods }
		subtract_from_variable		= { civ_factory_counter_production_@token:civ_production_consumer_goods = civ_factory_num_production_@token:civ_production_consumer_goods }
	}
########
	set_temp_variable		= { civ_factory_base_speed_temp = civ_factories_ui_array_last_var_@token:civ_production_fertilizer }
	multiply_temp_variable	= { civ_factory_base_speed_temp = 5 }
	divide_temp_variable	= { civ_factory_base_speed_temp = global.civ_factories_production_cost_@token:civ_production_fertilizer }
	set_variable			= { civ_factory_total_speed_@token:civ_production_fertilizer = civ_factory_base_speed_temp }
	
	set_temp_variable		= { civ_current_efficiency_temp = civ_current_efficiency_@token:civ_production_fertilizer }										# бонус от эффективности
	divide_temp_variable	= { civ_current_efficiency_temp = 100 }
	multiply_variable		= { civ_factory_total_speed_@token:civ_production_fertilizer = civ_current_efficiency_temp }
	
	add_to_variable			= { civ_factory_counter_production_@token:civ_production_fertilizer = civ_factory_total_speed_@token:civ_production_fertilizer }		# с десятыми долями
	set_temp_variable		= { civ_factory_num_production_@token:civ_production_fertilizer = civ_factory_counter_production_@token:civ_production_fertilizer }
	if = {
		limit = { check_variable = { var = civ_factory_num_production_@token:civ_production_fertilizer value = 1 compare = greater_than_or_equals } }				# если производство больше 1 шт\день
		round_temp_variable			= civ_factory_num_production_@token:civ_production_fertilizer
		add_equipment_to_stockpile	= { type = civ_production_fertilizer amount = civ_factory_num_production_@token:civ_production_fertilizer }
		subtract_from_variable		= { civ_factory_counter_production_@token:civ_production_fertilizer = civ_factory_num_production_@token:civ_production_fertilizer }
	}
########
	set_temp_variable		= { civ_factory_base_speed_temp = civ_factories_ui_array_last_var_@token:civ_production_tractor }
	multiply_temp_variable	= { civ_factory_base_speed_temp = 5 }
	divide_temp_variable	= { civ_factory_base_speed_temp = global.civ_factories_production_cost_@token:civ_production_tractor }
	set_variable			= { civ_factory_total_speed_@token:civ_production_tractor = civ_factory_base_speed_temp }
	
	set_temp_variable		= { civ_current_efficiency_temp = civ_current_efficiency_@token:civ_production_tractor }										# бонус от эффективности
	divide_temp_variable	= { civ_current_efficiency_temp = 100 }
	multiply_variable		= { civ_factory_total_speed_@token:civ_production_tractor = civ_current_efficiency_temp }
	
	add_to_variable			= { civ_factory_counter_production_@token:civ_production_tractor = civ_factory_total_speed_@token:civ_production_tractor }		# с десятыми долями
	set_temp_variable		= { civ_factory_num_production_@token:civ_production_tractor = civ_factory_counter_production_@token:civ_production_tractor }
	if = {
		limit = { check_variable = { var = civ_factory_num_production_@token:civ_production_tractor value = 1 compare = greater_than_or_equals } }			# если производство больше 1 шт\день
		round_temp_variable			= civ_factory_num_production_@token:civ_production_tractor
		add_equipment_to_stockpile	= { type = civ_production_tractor amount = civ_factory_num_production_@token:civ_production_tractor }
		subtract_from_variable		= { civ_factory_counter_production_@token:civ_production_tractor = civ_factory_num_production_@token:civ_production_tractor }
	}
########
	set_temp_variable		= { civ_factory_base_speed_temp = civ_factories_ui_array_last_var_@token:civ_production_factory_machines }
	multiply_temp_variable	= { civ_factory_base_speed_temp = 5 }
	divide_temp_variable	= { civ_factory_base_speed_temp = global.civ_factories_production_cost_@token:civ_production_factory_machines }
	set_variable			= { civ_factory_total_speed_@token:civ_production_factory_machines = civ_factory_base_speed_temp }
	
	set_temp_variable		= { civ_current_efficiency_temp = civ_current_efficiency_@token:civ_production_factory_machines }										# бонус от эффективности
	divide_temp_variable	= { civ_current_efficiency_temp = 100 }
	multiply_variable		= { civ_factory_total_speed_@token:civ_production_factory_machines = civ_current_efficiency_temp }
	
	add_to_variable			= { civ_factory_counter_production_@token:civ_production_factory_machines = civ_factory_total_speed_@token:civ_production_factory_machines }		# с десятыми долями
	set_temp_variable		= { civ_factory_num_production_@token:civ_production_factory_machines = civ_factory_counter_production_@token:civ_production_factory_machines }
	if = {
		limit = { check_variable = { var = civ_factory_num_production_@token:civ_production_factory_machines value = 1 compare = greater_than_or_equals } }						# если производство больше 1 шт\день
		round_temp_variable			= civ_factory_num_production_@token:civ_production_factory_machines
		add_equipment_to_stockpile	= { type = civ_production_factory_machines amount = civ_factory_num_production_@token:civ_production_factory_machines }
		subtract_from_variable		= { civ_factory_counter_production_@token:civ_production_factory_machines = civ_factory_num_production_@token:civ_production_factory_machines }
	}
########
	set_temp_variable		= { civ_factory_base_speed_temp = civ_factories_ui_array_last_var_@token:civ_production_computer }
	multiply_temp_variable	= { civ_factory_base_speed_temp = 5 }
	divide_temp_variable	= { civ_factory_base_speed_temp = global.civ_factories_production_cost_@token:civ_production_computer }
	set_variable			= { civ_factory_total_speed_@token:civ_production_computer = civ_factory_base_speed_temp }
	
	set_temp_variable		= { civ_current_efficiency_temp = civ_current_efficiency_@token:civ_production_computer }										# бонус от эффективности
	divide_temp_variable	= { civ_current_efficiency_temp = 100 }
	multiply_variable		= { civ_factory_total_speed_@token:civ_production_computer = civ_current_efficiency_temp }
	
	add_to_variable			= { civ_factory_counter_production_@token:civ_production_computer = civ_factory_total_speed_@token:civ_production_computer }				# с десятыми долями
	set_temp_variable		= { civ_factory_num_production_@token:civ_production_computer = civ_factory_counter_production_@token:civ_production_computer }
	if = {
		limit = { check_variable = { var = civ_factory_num_production_@token:civ_production_computer value = 1 compare = greater_than_or_equals } }						# если производство больше 1 шт\день
		round_temp_variable			= civ_factory_num_production_@token:civ_production_computer
		add_equipment_to_stockpile	= { type = civ_production_computer amount = civ_factory_num_production_@token:civ_production_computer }
		subtract_from_variable		= { civ_factory_counter_production_@token:civ_production_computer = civ_factory_num_production_@token:civ_production_computer }
	}
########
}

calculate_efficiency_civ_production_effect = {
	if = {
		limit = {
			set_temp_variable		= { t1 = civ_factories_ui_array_last_var_@token:civ_production_consumer_goods }
			add_to_temp_variable	= { t1 = num_of_factories_cgff_var }							# только у civ_production_consumer_goods
		}
		if = {
			limit = {
				check_variable		= { t1 > 0 }
				check_variable		= { civ_current_efficiency_@token:civ_production_consumer_goods < civ_max_efficiency_@token:civ_production_consumer_goods }
			}
			set_temp_variable		= { t1 = civ_factories_ui_array_last_var_@token:civ_production_consumer_goods }
			multiply_temp_variable	= { t1 = global.civ_current_efficiency_growth_per_day_var }		# 0.05%
#			divide_temp_variable	= { t1 = 100 }
			### МНОЖИТЕЛИ РОСТА
			add_to_variable			= { civ_current_efficiency_@token:civ_production_consumer_goods = t1 }
		}
		else_if = {
			limit = {
				check_variable		= { t1 < 1 }
				check_variable		= { civ_current_efficiency_@token:civ_production_consumer_goods > 25.05 }
			}
			subtract_from_variable	= { civ_current_efficiency_@token:civ_production_consumer_goods = 0.05 }
		}
	}
	if = {
		limit = {
			set_temp_variable		= { t1 = civ_factories_ui_array_last_var_@token:civ_production_fertilizer }
		}
		if = {
			limit = {
				check_variable		= { t1 > 0 }
				check_variable		= { civ_current_efficiency_@token:civ_production_fertilizer < civ_max_efficiency_@token:civ_production_fertilizer }
			}
			set_temp_variable		= { t1 = civ_factories_ui_array_last_var_@token:civ_production_fertilizer }
			multiply_temp_variable	= { t1 = global.civ_current_efficiency_growth_per_day_var }		# 0.05%
#			divide_temp_variable	= { t1 = 100 }
			### МНОЖИТЕЛИ РОСТА
			add_to_variable			= { civ_current_efficiency_@token:civ_production_fertilizer = t1 }
		}
		else_if = {
			limit = {
				check_variable		= { t1 < 1 }
				check_variable		= { civ_current_efficiency_@token:civ_production_fertilizer > 25.05 }
			}
			subtract_from_variable	= { civ_current_efficiency_@token:civ_production_fertilizer = 0.05 }
		}
	}
	if = {
		limit = {
			set_temp_variable		= { t1 = civ_factories_ui_array_last_var_@token:civ_production_tractor }
		}
		if = {
			limit = {
				check_variable		= { t1 > 0 }
				check_variable		= { civ_current_efficiency_@token:civ_production_tractor < civ_max_efficiency_@token:civ_production_tractor }
			}
			set_temp_variable		= { t1 = civ_factories_ui_array_last_var_@token:civ_production_tractor }
			multiply_temp_variable	= { t1 = global.civ_current_efficiency_growth_per_day_var }		# 0.05%
#			divide_temp_variable	= { t1 = 100 }
			### МНОЖИТЕЛИ РОСТА
			add_to_variable			= { civ_current_efficiency_@token:civ_production_tractor = t1 }
		}
		else_if = {
			limit = {
				check_variable		= { t1 < 1 }
				check_variable		= { civ_current_efficiency_@token:civ_production_tractor > 25.05 }
			}
			subtract_from_variable	= { civ_current_efficiency_@token:civ_production_tractor = 0.05 }
		}
	}
	if = {
		limit = {
			set_temp_variable		= { t1 = civ_factories_ui_array_last_var_@token:civ_production_factory_machines }
		}
		if = {
			limit = {
				check_variable		= { t1 > 0 }
				check_variable		= { civ_current_efficiency_@token:civ_production_factory_machines < civ_max_efficiency_@token:civ_production_factory_machines }
			}
			set_temp_variable		= { t1 = civ_factories_ui_array_last_var_@token:civ_production_factory_machines }
			multiply_temp_variable	= { t1 = global.civ_current_efficiency_growth_per_day_var }		# 0.05%
#			divide_temp_variable	= { t1 = 100 }
			### МНОЖИТЕЛИ РОСТА
			add_to_variable			= { civ_current_efficiency_@token:civ_production_factory_machines = t1 }
		}
		else_if = {
			limit = {
				check_variable		= { t1 < 1 }
				check_variable		= { civ_current_efficiency_@token:civ_production_factory_machines > 25.05 }
			}
			subtract_from_variable	= { civ_current_efficiency_@token:civ_production_factory_machines = 0.05 }
		}
	}
	if = {
		limit = {
			set_temp_variable		= { t1 = civ_factories_ui_array_last_var_@token:civ_production_computer }
		}
		if = {
			limit = {
				check_variable		= { t1 > 0 }
				check_variable		= { civ_current_efficiency_@token:civ_production_computer < civ_max_efficiency_@token:civ_production_computer }
			}
			set_temp_variable		= { t1 = civ_factories_ui_array_last_var_@token:civ_production_computer }
			multiply_temp_variable	= { t1 = global.civ_current_efficiency_growth_per_day_var }		# 0.05%
#			divide_temp_variable	= { t1 = 100 }
			### МНОЖИТЕЛИ РОСТА
			add_to_variable			= { civ_current_efficiency_@token:civ_production_computer = t1 }
		}
		else_if = {
			limit = {
				check_variable		= { t1 < 1 }
				check_variable		= { civ_current_efficiency_@token:civ_production_computer > 25.05 }
			}
			subtract_from_variable	= { civ_current_efficiency_@token:civ_production_computer = 0.05 }
		}
	}
### CLAMP
	if = {
		limit = { check_variable	= { civ_max_efficiency_@token:civ_production_consumer_goods > 1 } }
		clamp_variable				= { var = civ_current_efficiency_@token:civ_production_consumer_goods	min = 1 max = civ_max_efficiency_@token:civ_production_consumer_goods }
	}
	if = {
		limit = { check_variable	= { civ_max_efficiency_@token:civ_production_fertilizer > 1 } }
		clamp_variable				= { var = civ_current_efficiency_@token:civ_production_fertilizer	min = 1 max = civ_max_efficiency_@token:civ_production_fertilizer }
	}
	if = {
		limit = { check_variable	= { civ_max_efficiency_@token:civ_production_tractor > 1 } }
		clamp_variable				= { var = civ_current_efficiency_@token:civ_production_tractor	min = 1 max = civ_max_efficiency_@token:civ_production_tractor }
	}
	if = {
		limit = { check_variable	= { civ_max_efficiency_@token:civ_production_factory_machines > 1 } }
		clamp_variable				= { var = civ_current_efficiency_@token:civ_production_factory_machines	min = 1 max = civ_max_efficiency_@token:civ_production_factory_machines }
	}
	if = {
		limit = { check_variable	= { civ_max_efficiency_@token:civ_production_computer > 1 } }
		clamp_variable				= { var = civ_current_efficiency_@token:civ_production_computer	min = 1 max = civ_max_efficiency_@token:civ_production_computer }
	}
	
	initiate_GUI_efficiency_civ_production_bar = yes
}

initiate_GUI_efficiency_civ_production_bar = {
	set_variable			= { GUI_civ_current_efficiency_@token:civ_production_consumer_goods = civ_current_efficiency_@token:civ_production_consumer_goods }
#	multiply_variable		= { GUI_civ_current_efficiency_@token:civ_production_consumer_goods = 100 }
	set_variable			= { GUI_civ_max_efficiency_@token:civ_production_consumer_goods = civ_max_efficiency_@token:civ_production_consumer_goods }
#	multiply_variable		= { GUI_civ_max_efficiency_@token:civ_production_consumer_goods = 100 }
	
	set_variable			= { GUI_civ_current_efficiency_@token:civ_production_fertilizer = civ_current_efficiency_@token:civ_production_fertilizer }
#	multiply_variable		= { GUI_civ_current_efficiency_@token:civ_production_fertilizer = 100 }
	set_variable			= { GUI_civ_max_efficiency_@token:civ_production_fertilizer = civ_max_efficiency_@token:civ_production_fertilizer }
#	multiply_variable		= { GUI_civ_max_efficiency_@token:civ_production_fertilizer = 100 }
	
	set_variable			= { GUI_civ_current_efficiency_@token:civ_production_tractor = civ_current_efficiency_@token:civ_production_tractor }
#	multiply_variable		= { GUI_civ_current_efficiency_@token:civ_production_tractor = 100 }
	set_variable			= { GUI_civ_max_efficiency_@token:civ_production_tractor = civ_max_efficiency_@token:civ_production_tractor }
#	multiply_variable		= { GUI_civ_max_efficiency_@token:civ_production_tractor = 100 }
	
	set_variable			= { GUI_civ_current_efficiency_@token:civ_production_factory_machines = civ_current_efficiency_@token:civ_production_factory_machines }
#	multiply_variable		= { GUI_civ_current_efficiency_@token:civ_production_factory_machines = 100 }
	set_variable			= { GUI_civ_max_efficiency_@token:civ_production_factory_machines = civ_max_efficiency_@token:civ_production_factory_machines }
#	multiply_variable		= { GUI_civ_max_efficiency_@token:civ_production_factory_machines = 100 }
	
	set_variable			= { GUI_civ_current_efficiency_@token:civ_production_computer = civ_current_efficiency_@token:civ_production_computer }
#	multiply_variable		= { GUI_civ_current_efficiency_@token:civ_production_computer = 100 }
	set_variable			= { GUI_civ_max_efficiency_@token:civ_production_computer = civ_max_efficiency_@token:civ_production_computer }
#	multiply_variable		= { GUI_civ_max_efficiency_@token:civ_production_computer = 100 }
}


calculate_consumer_goods_factories_effect = {
	set_temp_variable			= { cgff_temp = 1 }
	add_to_temp_variable		= { cgff_temp = modifier@consumer_goods_factor }
	multiply_temp_variable		= { cgff_temp = modifier@consumer_goods_expected_value }
	subtract_from_temp_variable	= { cgff_temp = 0.005 }
	
	set_temp_variable			= { num_of_factories_cgff_temp = num_of_factories }
	subtract_from_temp_variable	= { num_of_factories_cgff_temp = num_of_naval_factories }
	multiply_temp_variable		= { num_of_factories_cgff_temp = cgff_temp }
	round_temp_variable			= num_of_factories_cgff_temp
	set_variable				= { num_of_factories_cgff_var = num_of_factories_cgff_temp }
	
	if = {
		limit = { check_variable = { num_of_factories_cgff_var > 0 } }
		if = {
			limit = { NOT = { is_in_array = { civ_production_ui_array = token:civ_production_consumer_goods } } }
			add_to_array = { civ_production_ui_array = token:civ_production_consumer_goods }
		}
		if = {
			limit = { is_in_array = { civ_available_equipments_ui_array = token:civ_production_consumer_goods } }
			remove_from_array = { civ_available_equipments_ui_array = token:civ_production_consumer_goods }
		}
		if = {
			limit			= { NOT = { has_tech = default_civ_equipment_tech } }
			set_technology	= { default_civ_equipment_tech = 1 popup = no }
		}
		if = {
			limit = { NOT = { has_variable = civ_current_efficiency_@token:civ_production_consumer_goods } }
			set_variable = { civ_current_efficiency_@token:civ_production_consumer_goods = 25 }
		}
		if = {
			limit = { NOT = { has_variable = civ_max_efficiency_@token:civ_production_consumer_goods } }
			set_variable = { civ_max_efficiency_@token:civ_production_consumer_goods = 100 }
		}
		initiate_GUI_efficiency_civ_production_bar = yes
	}
}

calculate_private_building_effect = {
	set_temp_variable			= { capital_activity_fail_temp = 1 }
	subtract_from_temp_variable	= { capital_activity_fail_temp = private_capital_activity_value }
	clamp_temp_variable			= { var = capital_activity_fail_temp min = 0.0 max = 1.0 }
	set_temp_variable			= { capital_activity_success_temp = private_capital_activity_value }
	clamp_temp_variable			= { var = capital_activity_success_temp min = 0.0 max = 1.0 }
	
	if = {
		limit = { check_variable = { num_of_private_building_project < max_of_private_building_project_var } }
		random_list = {
			temp_var:capital_activity_fail_temp		= {
				# НИЧЕГО
			}
			temp_var:capital_activity_success_temp	= {
				add_to_variable = { num_of_private_building_project = 1 }
				private_building_add_effect = yes
			}
		}
	}
}

private_building_add_effect = {
	random_list = {
		1 = {
			if = {
				limit = { NOT = { is_in_array = { private_building_lines_ui_array = token:private_industrial_complex } } }
				add_to_array	= { private_building_lines_ui_array = token:private_industrial_complex }
				set_variable	= { private_build_speed_@token:private_industrial_complex = modifier@base_private_build_speed_modifier }
			}
			add_to_variable = { num_of_private_building_@token:private_industrial_complex = 1 }
			if = {
				limit = { NOT = { has_variable = private_building_target_state_@token:private_industrial_complex } }
				random_core_state = {
					limit = {
						is_owned_by = PREV
						free_building_slots = {
							building = private_industrial_complex
							size > 0
							include_locked = no
						}
					}
					set_variable = { PREV.private_building_target_state_@token:private_industrial_complex = THIS.id }
				}
			}
		}
		1 = {
			if = {
				limit = { NOT = { is_in_array = { private_building_lines_ui_array = token:private_arms_factory } } }
				add_to_array	= { private_building_lines_ui_array = token:private_arms_factory }
				set_variable	= { private_build_speed_@token:private_arms_factory = modifier@base_private_build_speed_modifier }
			}
			add_to_variable = { num_of_private_building_@token:private_arms_factory = 1 }
			if = {
				limit = { NOT = { has_variable = private_building_target_state_@token:private_arms_factory } }
				random_core_state = {
					limit = {
						is_owned_by = PREV
						free_building_slots = {
							building = private_arms_factory
							size > 0
							include_locked = no
						}
					}
					set_variable = { PREV.private_building_target_state_@token:private_arms_factory = THIS.id }
				}
			}
		}
		1 = {
			if = {
				limit = { NOT = { is_in_array = { private_building_lines_ui_array = token:private_dockyard } } }
				add_to_array	= { private_building_lines_ui_array = token:private_dockyard }
				set_variable	= { private_build_speed_@token:private_dockyard = modifier@base_private_build_speed_modifier }
			}
			add_to_variable = { num_of_private_building_@token:private_dockyard = 1 }
			if = {
				limit = { NOT = { has_variable = private_building_target_state_@token:private_dockyard } }
				random_core_state = {
					limit = {
						is_owned_by = PREV
						is_coastal = yes
						free_building_slots = {
							building = private_dockyard
							size > 0
							include_locked = no
						}
					}
					set_variable = { PREV.private_building_target_state_@token:private_dockyard = THIS.id }
				}
			}
		}
		1 = {
			if = {
				limit = { NOT = { is_in_array = { private_building_lines_ui_array = token:private_synthetic_refinery } } }
				add_to_array	= { private_building_lines_ui_array = token:private_synthetic_refinery }
				set_variable	= { private_build_speed_@token:private_synthetic_refinery = modifier@base_private_build_speed_modifier }
			}
			add_to_variable = { num_of_private_building_@token:private_synthetic_refinery = 1 }
			if = {
				limit = { NOT = { has_variable = private_building_target_state_@token:private_synthetic_refinery } }
				random_core_state = {
					limit = {
						is_owned_by = PREV
						free_building_slots = {
							building = private_synthetic_refinery
							size > 0
							include_locked = no
						}
					}
					set_variable = { PREV.private_building_target_state_@token:private_synthetic_refinery = THIS.id }
				}
			}
		}
		1 = {
			if = {
				limit = { NOT = { is_in_array = { private_building_lines_ui_array = token:private_steel_mill } } }
				add_to_array	= { private_building_lines_ui_array = token:private_steel_mill }
				set_variable	= { private_build_speed_@token:private_steel_mill = modifier@base_private_build_speed_modifier }
			}
			add_to_variable = { num_of_private_building_@token:private_steel_mill = 1 }
			if = {
				limit = { NOT = { has_variable = private_building_target_state_@token:private_steel_mill } }
				random_core_state = {
					limit = {
						is_owned_by = PREV
						free_building_slots = {
							building = private_steel_mill
							size > 0
							include_locked = no
						}
					}
					set_variable = { PREV.private_building_target_state_@token:private_steel_mill = THIS.id }
				}
			}
		}
		1 = {
			if = {
				limit = { NOT = { is_in_array = { private_building_lines_ui_array = token:private_agro_complex } } }
				add_to_array	= { private_building_lines_ui_array = token:private_agro_complex }
				set_variable	= { private_build_speed_@token:private_agro_complex = modifier@base_private_build_speed_modifier }
			}
			add_to_variable = { num_of_private_building_@token:private_agro_complex = 1 }
			if = {
				limit = { NOT = { has_variable = private_building_target_state_@token:private_agro_complex } }
				random_core_state = {
					limit = {
						is_owned_by = PREV
						free_building_slots = {
							building = private_agro_complex
							size > 0
							include_locked = no
						}
					}
					set_variable = { PREV.private_building_target_state_@token:private_agro_complex = THIS.id }
				}
			}
		}
		1 = {
			if = {
				limit = { NOT = { is_in_array = { private_building_lines_ui_array = token:private_livestock_complex } } }
				add_to_array	= { private_building_lines_ui_array = token:private_livestock_complex }
				set_variable	= { private_build_speed_@token:private_livestock_complex = modifier@base_private_build_speed_modifier }
			}
			add_to_variable = { num_of_private_building_@token:private_livestock_complex = 1 }
			if = {
				limit = { NOT = { has_variable = private_building_target_state_@token:private_livestock_complex } }
				random_core_state = {
					limit = {
						is_owned_by = PREV
						free_building_slots = {
							building = private_livestock_complex
							size > 0
							include_locked = no
						}
					}
					set_variable = { PREV.private_building_target_state_@token:private_livestock_complex = THIS.id }
				}
			}
		}
		1 = {
			if = {
				limit = { NOT = { is_in_array = { private_building_lines_ui_array = token:private_thermal_power_plant } } }
				add_to_array	= { private_building_lines_ui_array = token:private_thermal_power_plant }
				set_variable	= { private_build_speed_@token:private_thermal_power_plant = modifier@base_private_build_speed_modifier }
			}
			add_to_variable = { num_of_private_building_@token:private_thermal_power_plant = 1 }
			if = {
				limit = { NOT = { has_variable = private_building_target_state_@token:private_thermal_power_plant } }
				random_core_state = {
					limit = {
						is_owned_by = PREV
						free_building_slots = {
							building = private_thermal_power_plant
							size > 0
							include_locked = no
						}
					}
					set_variable = { PREV.private_building_target_state_@token:private_thermal_power_plant = THIS.id }
				}
			}
		}
	}
}

calculate_max_of_private_building_project_effect = {
	set_temp_variable			= { pca_temp = private_capital_activity_value }
	multiply_temp_variable		= { pca_temp = 5 }		#*100/20
	subtract_from_temp_variable	= { pca_temp = 0.5 }
	round_temp_variable			= pca_temp
	clamp_temp_variable			= { var = pca_temp min = 1 max = 5 }
	set_variable				= { max_of_private_building_project_var = pca_temp }
}

calculate_private_electropower_supply_effect = {
	set_temp_variable				= { private_electropower_supply_temp = modifier@num_generation_electric_power_private }
	divide_temp_variable			= { private_electropower_supply_temp = modifier@num_use_electric_power_private }
	set_variable					= { private_electropower_supply_value = private_electropower_supply_temp }
	if = {
		limit = { check_variable	= { sell_private_electric_button_var = 2 } }
		set_variable				= { private_electropower_supply_value = 1 }
	}
}

calculate_private_segment_effect = {
	set_variable					= { private_capital_segment_value = modifier@num_proletariat_private_k }
	multiply_variable				= { private_capital_segment_value = -1 }
	set_variable					= { TOTAL_num_USE_proletariat_private_k_pozitiv = private_capital_segment_value }
	divide_variable					= { private_capital_segment_value = TOTAL_num_proletariat_k }
	
	# ФОРМАТ от modifier@num_proletariat_private_k
	set_variable			= { TOTAL_num_USE_proletariat_private_pozitiv = TOTAL_num_USE_proletariat_private_k_pozitiv }
	multiply_variable		= { TOTAL_num_USE_proletariat_private_pozitiv = 1000 }
	set_variable			= { TOTAL_num_USE_proletariat_private_m_pozitiv	= TOTAL_num_USE_proletariat_private_k_pozitiv }
	divide_variable			= { TOTAL_num_USE_proletariat_private_m_pozitiv	= 1000 }
}

calculate_private_building_progress_effect = {
	set_temp_variable				= { private_capital_activity_temp = proletariat_unemployment_rate }
	multiply_temp_variable			= { private_capital_activity_temp = 0.5 }
	add_to_temp_variable			= { private_capital_activity_temp = 1 }
	multiply_temp_variable			= { private_capital_activity_temp = modifier@capitalist_activity_modifier }
	set_variable					= { private_capital_activity_value = private_capital_activity_temp }
	
	calculate_max_of_private_building_project_effect	= yes
	calculate_private_electropower_supply_effect		= yes
	calculate_private_segment_effect					= yes
	
	if = {
		limit = { check_variable = { num_of_private_building_@token:private_industrial_complex > 0 } }
		set_temp_variable			= { tp2 = 1 }
		subtract_from_temp_variable	= { tp2 = private_electropower_supply_value }
		set_temp_variable			= { tp1 = 1 }
		add_to_temp_variable		= { tp1 = private_capital_activity_value }
		subtract_from_temp_variable	= { tp1 = tp2 }
		multiply_temp_variable		= { tp1 = global.private_build_growth_per_day_var }
		multiply_temp_variable		= { tp1 = private_build_speed_@token:private_industrial_complex }

		add_to_variable				= { completion_private_building_@token:private_industrial_complex = tp1 }
		
		set_variable				= {	GUI_completion_private_building_@token:private_industrial_complex = completion_private_building_@token:private_industrial_complex }
		divide_variable				= {	GUI_completion_private_building_@token:private_industrial_complex = global.private_build_cost_@token:private_industrial_complex }
		multiply_variable			= {	GUI_completion_private_building_@token:private_industrial_complex = 100 }
		
		if = {
			limit = { check_variable = { var = completion_private_building_@token:private_industrial_complex value = global.private_build_cost_@token:private_industrial_complex compare = greater_than_or_equals } }
			
			meta_effect = {
				text = {
					[TARGET_STATE]	= {
						add_building_construction = {
							type			= private_industrial_complex
							level			= 1
							instant_build	= yes
						}
					}
				}
				TARGET_STATE = "[?var:private_building_target_state_@token:private_industrial_complex.GetID]"
			}
			add_to_variable			= { num_of_private_building_@token:private_industrial_complex = -1 }
			add_to_variable			= { num_of_private_building_project = -1 }
			add_to_variable			= { num_of_private_building_complete_project = 1 }
			
			clear_variable			= private_building_target_state_@token:private_industrial_complex
			clear_variable			= completion_private_building_@token:private_industrial_complex
			clear_variable			= GUI_completion_private_building_@token:private_industrial_complex
			if = {
				limit = { check_variable = { num_of_private_building_@token:private_industrial_complex > 0 } }
				random_owned_state = {
					limit = {
						is_core_of = PREV
						free_building_slots = {
							building = private_industrial_complex
							size > 0
							include_locked = no
						}
					}
					set_variable	= { PREV.private_building_target_state_@token:private_industrial_complex = THIS.id }
				}
				else = {
					remove_from_array	= { private_building_lines_ui_array = token:private_industrial_complex }
					clear_variable		= private_build_speed_@token:private_industrial_complex
					clear_variable		= private_build_subsidies_to_@token:private_industrial_complex
					calculate_TOTAL_private_build_subsidies_effect = yes
				}
			}
		}
	}
	if = {
		limit = { check_variable = { num_of_private_building_@token:private_arms_factory > 0 } }
		set_temp_variable			= { tp2 = 1 }
		subtract_from_temp_variable	= { tp2 = private_electropower_supply_value }
		set_temp_variable			= { tp1 = 1 }
		add_to_temp_variable		= { tp1 = private_capital_activity_value }
		subtract_from_temp_variable	= { tp1 = tp2 }
		multiply_temp_variable		= { tp1 = global.private_build_growth_per_day_var }
		multiply_temp_variable		= { tp1 = private_build_speed_@token:private_arms_factory }

		add_to_variable				= { completion_private_building_@token:private_arms_factory = tp1 }
		
		set_variable				= {	GUI_completion_private_building_@token:private_arms_factory = completion_private_building_@token:private_arms_factory }
		divide_variable				= {	GUI_completion_private_building_@token:private_arms_factory = global.private_build_cost_@token:private_arms_factory }
		multiply_variable			= {	GUI_completion_private_building_@token:private_arms_factory = 100 }
		
		if = {
			limit = { check_variable = { var = completion_private_building_@token:private_arms_factory value = global.private_build_cost_@token:private_arms_factory compare = greater_than_or_equals } }
			
			meta_effect = {
				text = {
					[TARGET_STATE]	= {
						add_building_construction = {
							type			= private_arms_factory
							level			= 1
							instant_build	= yes
						}
					}
				}
				TARGET_STATE = "[?var:private_building_target_state_@token:private_arms_factory.GetID]"
			}
			add_to_variable			= { num_of_private_building_@token:private_arms_factory = -1 }
			add_to_variable			= { num_of_private_building_project = -1 }
			add_to_variable			= { num_of_private_building_complete_project = 1 }
			
			clear_variable			= private_building_target_state_@token:private_arms_factory
			clear_variable			= completion_private_building_@token:private_arms_factory
			clear_variable			= GUI_completion_private_building_@token:private_arms_factory
			if = {
				limit = { check_variable = { num_of_private_building_@token:private_arms_factory > 0 } }
				random_owned_state = {
					limit = {
						is_core_of = PREV
						free_building_slots = {
							building = private_arms_factory
							size > 0
							include_locked = no
						}
					}
					set_variable	= { PREV.private_building_target_state_@token:private_arms_factory = THIS.id }
				}
				else = {
					remove_from_array	= { private_building_lines_ui_array = token:private_arms_factory }
					clear_variable		= private_build_speed_@token:private_arms_factory
					clear_variable		= private_build_subsidies_to_@token:private_arms_factory
					calculate_TOTAL_private_build_subsidies_effect = yes
				}
			}
		}
	}
	if = {
		limit = { check_variable = { num_of_private_building_@token:private_dockyard > 0 } }
		set_temp_variable			= { tp2 = 1 }
		subtract_from_temp_variable	= { tp2 = private_electropower_supply_value }
		set_temp_variable			= { tp1 = 1 }
		add_to_temp_variable		= { tp1 = private_capital_activity_value }
		subtract_from_temp_variable	= { tp1 = tp2 }
		multiply_temp_variable		= { tp1 = global.private_build_growth_per_day_var }
		multiply_temp_variable		= { tp1 = private_build_speed_@token:private_dockyard }

		add_to_variable				= { completion_private_building_@token:private_dockyard = tp1 }
		
		set_variable				= {	GUI_completion_private_building_@token:private_dockyard = completion_private_building_@token:private_dockyard }
		divide_variable				= {	GUI_completion_private_building_@token:private_dockyard = global.private_build_cost_@token:private_dockyard }
		multiply_variable			= {	GUI_completion_private_building_@token:private_dockyard = 100 }
		
		if = {
			limit = { check_variable = { var = completion_private_building_@token:private_dockyard value = global.private_build_cost_@token:private_dockyard compare = greater_than_or_equals } }
			
			meta_effect = {
				text = {
					[TARGET_STATE]	= {
						add_building_construction = {
							type			= private_dockyard
							level			= 1
							instant_build	= yes
						}
					}
				}
				TARGET_STATE = "[?var:private_building_target_state_@token:private_dockyard.GetID]"
			}
			add_to_variable			= { num_of_private_building_@token:private_dockyard = -1 }
			add_to_variable			= { num_of_private_building_project = -1 }
			add_to_variable			= { num_of_private_building_complete_project = 1 }
			
			clear_variable			= private_building_target_state_@token:private_dockyard
			clear_variable			= completion_private_building_@token:private_dockyard
			clear_variable			= GUI_completion_private_building_@token:private_dockyard
			if = {
				limit = { check_variable = { num_of_private_building_@token:private_dockyard > 0 } }
				random_owned_state = {
					limit = {
						is_core_of = PREV
						free_building_slots = {
							building = private_dockyard
							size > 0
							include_locked = no
						}
					}
					set_variable	= { PREV.private_building_target_state_@token:private_dockyard = THIS.id }
				}
				else = {
					remove_from_array	= { private_building_lines_ui_array = token:private_dockyard }
					clear_variable		= private_build_speed_@token:private_dockyard
					clear_variable		= private_build_subsidies_to_@token:private_dockyard
					calculate_TOTAL_private_build_subsidies_effect = yes
				}
			}
		}
	}
	if = {
		limit = { check_variable = { num_of_private_building_@token:private_synthetic_refinery > 0 } }
		set_temp_variable			= { tp2 = 1 }
		subtract_from_temp_variable	= { tp2 = private_electropower_supply_value }
		set_temp_variable			= { tp1 = 1 }
		add_to_temp_variable		= { tp1 = private_capital_activity_value }
		subtract_from_temp_variable	= { tp1 = tp2 }
		multiply_temp_variable		= { tp1 = global.private_build_growth_per_day_var }
		multiply_temp_variable		= { tp1 = private_build_speed_@token:private_synthetic_refinery }

		add_to_variable				= { completion_private_building_@token:private_synthetic_refinery = tp1 }
		
		set_variable				= {	GUI_completion_private_building_@token:private_synthetic_refinery = completion_private_building_@token:private_synthetic_refinery }
		divide_variable				= {	GUI_completion_private_building_@token:private_synthetic_refinery = global.private_build_cost_@token:private_synthetic_refinery }
		multiply_variable			= {	GUI_completion_private_building_@token:private_synthetic_refinery = 100 }
		
		if = {
			limit = { check_variable = { var = completion_private_building_@token:private_synthetic_refinery value = global.private_build_cost_@token:private_synthetic_refinery compare = greater_than_or_equals } }
			
			meta_effect = {
				text = {
					[TARGET_STATE]	= {
						add_building_construction = {
							type			= private_synthetic_refinery
							level			= 1
							instant_build	= yes
						}
					}
				}
				TARGET_STATE = "[?var:private_building_target_state_@token:private_synthetic_refinery.GetID]"
			}
			add_to_variable			= { num_of_private_building_@token:private_synthetic_refinery = -1 }
			add_to_variable			= { num_of_private_building_project = -1 }
			add_to_variable			= { num_of_private_building_complete_project = 1 }
			
			clear_variable			= private_building_target_state_@token:private_synthetic_refinery
			clear_variable			= completion_private_building_@token:private_synthetic_refinery
			clear_variable			= GUI_completion_private_building_@token:private_synthetic_refinery
			if = {
				limit = { check_variable = { num_of_private_building_@token:private_synthetic_refinery > 0 } }
				random_owned_state = {
					limit = {
						is_core_of = PREV
						free_building_slots = {
							building = private_synthetic_refinery
							size > 0
							include_locked = no
						}
					}
					set_variable	= { PREV.private_building_target_state_@token:private_synthetic_refinery = THIS.id }
				}
				else = {
					remove_from_array	= { private_building_lines_ui_array = token:private_synthetic_refinery }
					clear_variable		= private_build_speed_@token:private_synthetic_refinery
					clear_variable		= private_build_subsidies_to_@token:private_synthetic_refinery
					calculate_TOTAL_private_build_subsidies_effect = yes
				}
			}
		}
	}
	if = {
		limit = { check_variable = { num_of_private_building_@token:private_steel_mill > 0 } }
		set_temp_variable			= { tp2 = 1 }
		subtract_from_temp_variable	= { tp2 = private_electropower_supply_value }
		set_temp_variable			= { tp1 = 1 }
		add_to_temp_variable		= { tp1 = private_capital_activity_value }
		subtract_from_temp_variable	= { tp1 = tp2 }
		multiply_temp_variable		= { tp1 = global.private_build_growth_per_day_var }
		multiply_temp_variable		= { tp1 = private_build_speed_@token:private_steel_mill }

		add_to_variable				= { completion_private_building_@token:private_steel_mill = tp1 }
		
		set_variable				= {	GUI_completion_private_building_@token:private_steel_mill = completion_private_building_@token:private_steel_mill }
		divide_variable				= {	GUI_completion_private_building_@token:private_steel_mill = global.private_build_cost_@token:private_steel_mill }
		multiply_variable			= {	GUI_completion_private_building_@token:private_steel_mill = 100 }
		
		if = {
			limit = { check_variable = { var = completion_private_building_@token:private_steel_mill value = global.private_build_cost_@token:private_steel_mill compare = greater_than_or_equals } }
			
			meta_effect = {
				text = {
					[TARGET_STATE]	= {
						add_building_construction = {
							type			= private_steel_mill
							level			= 1
							instant_build	= yes
						}
					}
				}
				TARGET_STATE = "[?var:private_building_target_state_@token:private_steel_mill.GetID]"
			}
			add_to_variable			= { num_of_private_building_@token:private_steel_mill = -1 }
			add_to_variable			= { num_of_private_building_project = -1 }
			add_to_variable			= { num_of_private_building_complete_project = 1 }
			
			clear_variable			= private_building_target_state_@token:private_steel_mill
			clear_variable			= completion_private_building_@token:private_steel_mill
			clear_variable			= GUI_completion_private_building_@token:private_steel_mill
			if = {
				limit = { check_variable = { num_of_private_building_@token:private_steel_mill > 0 } }
				random_owned_state = {
					limit = {
						is_core_of = PREV
						free_building_slots = {
							building = private_steel_mill
							size > 0
							include_locked = no
						}
					}
					set_variable	= { PREV.private_building_target_state_@token:private_steel_mill = THIS.id }
				}
				else = {
					remove_from_array	= { private_building_lines_ui_array = token:private_steel_mill }
					clear_variable		= private_build_speed_@token:private_steel_mill
					clear_variable		= private_build_subsidies_to_@token:private_steel_mill
					calculate_TOTAL_private_build_subsidies_effect = yes
				}
			}
		}
	}
	if = {
		limit = { check_variable = { num_of_private_building_@token:private_agro_complex > 0 } }
		set_temp_variable			= { tp2 = 1 }
		subtract_from_temp_variable	= { tp2 = private_electropower_supply_value }
		set_temp_variable			= { tp1 = 1 }
		add_to_temp_variable		= { tp1 = private_capital_activity_value }
		subtract_from_temp_variable	= { tp1 = tp2 }
		multiply_temp_variable		= { tp1 = global.private_build_growth_per_day_var }
		multiply_temp_variable		= { tp1 = private_build_speed_@token:private_agro_complex }

		add_to_variable				= { completion_private_building_@token:private_agro_complex = tp1 }
		
		set_variable				= {	GUI_completion_private_building_@token:private_agro_complex = completion_private_building_@token:private_agro_complex }
		divide_variable				= {	GUI_completion_private_building_@token:private_agro_complex = global.private_build_cost_@token:private_agro_complex }
		multiply_variable			= {	GUI_completion_private_building_@token:private_agro_complex = 100 }
		
		if = {
			limit = { check_variable = { var = completion_private_building_@token:private_agro_complex value = global.private_build_cost_@token:private_agro_complex compare = greater_than_or_equals } }
			
			meta_effect = {
				text = {
					[TARGET_STATE]	= {
						add_building_construction = {
							type			= private_agro_complex
							level			= 1
							instant_build	= yes
						}
					}
				}
				TARGET_STATE = "[?var:private_building_target_state_@token:private_agro_complex.GetID]"
			}
			add_to_variable			= { num_of_private_building_@token:private_agro_complex = -1 }
			add_to_variable			= { num_of_private_building_project = -1 }
			add_to_variable			= { num_of_private_building_complete_project = 1 }
			
			clear_variable			= private_building_target_state_@token:private_agro_complex
			clear_variable			= completion_private_building_@token:private_agro_complex
			clear_variable			= GUI_completion_private_building_@token:private_agro_complex
			if = {
				limit = { check_variable = { num_of_private_building_@token:private_agro_complex > 0 } }
				random_owned_state = {
					limit = {
						is_core_of = PREV
						free_building_slots = {
							building = private_agro_complex
							size > 0
							include_locked = no
						}
					}
					set_variable	= { PREV.private_building_target_state_@token:private_agro_complex = THIS.id }
				}
				else = {
					remove_from_array	= { private_building_lines_ui_array = token:private_agro_complex }
					clear_variable		= private_build_speed_@token:private_agro_complex
					clear_variable		= private_build_subsidies_to_@token:private_agro_complex
					calculate_TOTAL_private_build_subsidies_effect = yes
				}
			}
		}
	}
	if = {
		limit = { check_variable = { num_of_private_building_@token:private_livestock_complex > 0 } }
		set_temp_variable			= { tp2 = 1 }
		subtract_from_temp_variable	= { tp2 = private_electropower_supply_value }
		set_temp_variable			= { tp1 = 1 }
		add_to_temp_variable		= { tp1 = private_capital_activity_value }
		subtract_from_temp_variable	= { tp1 = tp2 }
		multiply_temp_variable		= { tp1 = global.private_build_growth_per_day_var }
		multiply_temp_variable		= { tp1 = private_build_speed_@token:private_livestock_complex }

		add_to_variable				= { completion_private_building_@token:private_livestock_complex = tp1 }
		
		set_variable				= {	GUI_completion_private_building_@token:private_livestock_complex = completion_private_building_@token:private_livestock_complex }
		divide_variable				= {	GUI_completion_private_building_@token:private_livestock_complex = global.private_build_cost_@token:private_livestock_complex }
		multiply_variable			= {	GUI_completion_private_building_@token:private_livestock_complex = 100 }
		
		if = {
			limit = { check_variable = { var = completion_private_building_@token:private_livestock_complex value = global.private_build_cost_@token:private_livestock_complex compare = greater_than_or_equals } }
			
			meta_effect = {
				text = {
					[TARGET_STATE]	= {
						add_building_construction = {
							type			= private_livestock_complex
							level			= 1
							instant_build	= yes
						}
					}
				}
				TARGET_STATE = "[?var:private_building_target_state_@token:private_livestock_complex.GetID]"
			}
			add_to_variable			= { num_of_private_building_@token:private_livestock_complex = -1 }
			add_to_variable			= { num_of_private_building_project = -1 }
			add_to_variable			= { num_of_private_building_complete_project = 1 }
			
			clear_variable			= private_building_target_state_@token:private_livestock_complex
			clear_variable			= completion_private_building_@token:private_livestock_complex
			clear_variable			= GUI_completion_private_building_@token:private_livestock_complex
			if = {
				limit = { check_variable = { num_of_private_building_@token:private_livestock_complex > 0 } }
				random_owned_state = {
					limit = {
						is_core_of = PREV
						free_building_slots = {
							building = private_livestock_complex
							size > 0
							include_locked = no
						}
					}
					set_variable	= { PREV.private_building_target_state_@token:private_livestock_complex = THIS.id }
				}
				else = {
					remove_from_array	= { private_building_lines_ui_array = token:private_livestock_complex }
					clear_variable		= private_build_speed_@token:private_livestock_complex
					clear_variable		= private_build_subsidies_to_@token:private_livestock_complex
					calculate_TOTAL_private_build_subsidies_effect = yes
				}
			}
		}
	}
	if = {
		limit = { check_variable = { num_of_private_building_@token:private_thermal_power_plant > 0 } }
		set_temp_variable			= { tp2 = 1 }
		subtract_from_temp_variable	= { tp2 = private_electropower_supply_value }
		set_temp_variable			= { tp1 = 1 }
		add_to_temp_variable		= { tp1 = private_capital_activity_value }
		subtract_from_temp_variable	= { tp1 = tp2 }
		multiply_temp_variable		= { tp1 = global.private_build_growth_per_day_var }
		multiply_temp_variable		= { tp1 = private_build_speed_@token:private_thermal_power_plant }

		add_to_variable				= { completion_private_building_@token:private_thermal_power_plant = tp1 }
		
		set_variable				= {	GUI_completion_private_building_@token:private_thermal_power_plant = completion_private_building_@token:private_thermal_power_plant }
		divide_variable				= {	GUI_completion_private_building_@token:private_thermal_power_plant = global.private_build_cost_@token:private_thermal_power_plant }
		multiply_variable			= {	GUI_completion_private_building_@token:private_thermal_power_plant = 100 }
		
		if = {
			limit = { check_variable = { var = completion_private_building_@token:private_thermal_power_plant value = global.private_build_cost_@token:private_thermal_power_plant compare = greater_than_or_equals } }
			
			meta_effect = {
				text = {
					[TARGET_STATE]	= {
						add_building_construction = {
							type			= private_thermal_power_plant
							level			= 1
							instant_build	= yes
						}
					}
				}
				TARGET_STATE = "[?var:private_building_target_state_@token:private_thermal_power_plant.GetID]"
			}
			add_to_variable			= { num_of_private_building_@token:private_thermal_power_plant = -1 }
			add_to_variable			= { num_of_private_building_project = -1 }
			add_to_variable			= { num_of_private_building_complete_project = 1 }
			
			clear_variable			= private_building_target_state_@token:private_thermal_power_plant
			clear_variable			= completion_private_building_@token:private_thermal_power_plant
			clear_variable			= GUI_completion_private_building_@token:private_thermal_power_plant
			if = {
				limit = { check_variable = { num_of_private_building_@token:private_thermal_power_plant > 0 } }
				random_owned_state = {
					limit = {
						is_core_of = PREV
						free_building_slots = {
							building = private_thermal_power_plant
							size > 0
							include_locked = no
						}
					}
					set_variable	= { PREV.private_building_target_state_@token:private_thermal_power_plant = THIS.id }
				}
				else = {
					remove_from_array	= { private_building_lines_ui_array = token:private_thermal_power_plant }
					clear_variable		= private_build_speed_@token:private_thermal_power_plant
					clear_variable		= private_build_subsidies_to_@token:private_thermal_power_plant
					calculate_TOTAL_private_build_subsidies_effect = yes
				}
			}
		}
	}
}

calculate_TOTAL_private_build_subsidies_effect = {
	set_variable					= { TOTAL_private_build_subsidies_to = private_build_subsidies_to_@token:private_industrial_complex }
	add_to_variable					= { TOTAL_private_build_subsidies_to = private_build_subsidies_to_@token:private_arms_factory }
	add_to_variable					= { TOTAL_private_build_subsidies_to = private_build_subsidies_to_@token:private_dockyard }
	add_to_variable					= { TOTAL_private_build_subsidies_to = private_build_subsidies_to_@token:private_synthetic_refinery }
	add_to_variable					= { TOTAL_private_build_subsidies_to = private_build_subsidies_to_@token:private_steel_mill }
	add_to_variable					= { TOTAL_private_build_subsidies_to = private_build_subsidies_to_@token:private_agro_complex }
	add_to_variable					= { TOTAL_private_build_subsidies_to = private_build_subsidies_to_@token:private_livestock_complex }
	add_to_variable					= { TOTAL_private_build_subsidies_to = private_build_subsidies_to_@token:private_thermal_power_plant }
	force_update_dynamic_modifier	= yes
}

effect_1 = {
#	clear_variable = private_building_target_state_@token:private_thermal_power_plant
	random_owned_state = {
		limit = {
			is_core_of = ROOT
			free_building_slots = {
				building = private_thermal_power_plant
				size > 0
				include_locked = no
			}
		}
		set_variable = { ROOT.private_building_target_state_@token:private_thermal_power_plant = PREV.id }
	}
	log = "TARGET_STATE: [?private_building_target_state_@token:private_thermal_power_plant.GetID]"
	meta_effect = {
		text = {
			[TARGET_STATE] = {
				add_building_construction = {
					type			= private_thermal_power_plant
					level			= 1
					instant_build	= yes
				}
			}
		}
		TARGET_STATE = "[?var:private_building_target_state_@token:private_thermal_power_plant.GetID]"
	}
}

effect_2 = {
	meta_effect = {
		text = {
			set_technology	= { [TARGET_TECH] = 1	popup = yes }
#			log = "TARGET_TECH: [?global.technology^1.GetTokenKey]"
		}
		TARGET_TECH = "[?global.technology^2.GetTokenKey]"
	}
	
	log = "TARGET_TECH: [?global.technology^2]"
	log = "TOTAL technologies: [?global.technology^num]"
}

effect_3 = {										# имя команды может быть любой. В эффектах фокусов/ивентов ты просто пишешь тэг и эту команду. Например SOV = { effect_3 = yes }
	set_temp_variable	= { current_index = 1 }		# задается порядковый индекс. Начинаем с 1 номера в массиве
	while_loop_effect	= {							# это команда на вызов цикла
		limit			= { check_variable = { current_index < global.technology^num } }	# когда цикл пройдет от 1 (переменная выше current_index) до посленей технологии в массиве global.technology
		meta_effect		= {							# это команда на вызов мета эффекта. Здесь происходит выдача технологии, которая соответствует порядковому номеру в массиве global.technology
			text		= {
				if		= {
					limit			= { NOT = { has_tech = [TARGET_TECH] } }
					set_technology	= { [TARGET_TECH] = 1	popup = no }
				}
			}
			TARGET_TECH				= "[?global.technology^current_index.GetTokenKey]"	# конкретная технология, которая в текущий момент соответствует порядковый индекс current_index в массиве global.technology
		}
		add_to_temp_variable		= { current_index = 1 }								# здесь обеспечивается сдвиг порядкового индекса current_index
	}
	log = "TOTAL technologies: [?global.technology^num]"								# это просто лог, в целом он не нужен. Просто отображает общее количество технологий в моде
}